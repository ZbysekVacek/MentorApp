openapi: 3.0.3
info:
  title: MentorApp internal API
  version: 1.0.0
  description: Internal API specification
paths:
  /api/competency/all:
    get:
      operationId: competency_all_list
      tags:
      - competency
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Competency'
          description: ''
  /api/meetings/:
    get:
      operationId: meetings_list
      tags:
      - meetings
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Meeting'
          description: ''
    post:
      operationId: meetings_create
      tags:
      - meetings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MeetingRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MeetingRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MeetingRequest'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Meeting'
          description: ''
  /api/meetings/{id}:
    get:
      operationId: meetings_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - meetings
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Meeting'
          description: ''
    put:
      operationId: meetings_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - meetings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MeetingRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MeetingRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MeetingRequest'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Meeting'
          description: ''
    patch:
      operationId: meetings_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - meetings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedMeetingRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedMeetingRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedMeetingRequest'
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Meeting'
          description: ''
    delete:
      operationId: meetings_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - meetings
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '204':
          description: No response body
  /api/notifications:
    get:
      operationId: notifications_get_all
      description: Lists all notifications for the current user
      tags:
      - notifications
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notification'
          description: ''
  /api/notifications/mark-as-seen:
    get:
      operationId: notifications_mark_as_seen
      description: Marks all unseen notifications as seen for logged in user
      tags:
      - notifications
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
          description: User is not logged in
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
          description: Generic server error
        '200':
          description: Notifications were marked as seen
  /api/notifications/unseen:
    get:
      operationId: notifications_get_unseen
      description: Lists all NOT SEEN notifications for the current user
      tags:
      - notifications
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notification'
          description: ''
  /api/schema/:
    get:
      operationId: schema_retrieve
      description: |-
        OpenApi3 schema for this API. Format can be selected via content negotiation.

        - YAML: application/vnd.oai.openapi
        - JSON: application/vnd.oai.openapi+json
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: lang
        schema:
          type: string
          enum:
          - af
          - ar
          - ar-dz
          - ast
          - az
          - be
          - bg
          - bn
          - br
          - bs
          - ca
          - ckb
          - cs
          - cy
          - da
          - de
          - dsb
          - el
          - en
          - en-au
          - en-gb
          - eo
          - es
          - es-ar
          - es-co
          - es-mx
          - es-ni
          - es-ve
          - et
          - eu
          - fa
          - fi
          - fr
          - fy
          - ga
          - gd
          - gl
          - he
          - hi
          - hr
          - hsb
          - hu
          - hy
          - ia
          - id
          - ig
          - io
          - is
          - it
          - ja
          - ka
          - kab
          - kk
          - km
          - kn
          - ko
          - ky
          - lb
          - lt
          - lv
          - mk
          - ml
          - mn
          - mr
          - ms
          - my
          - nb
          - ne
          - nl
          - nn
          - os
          - pa
          - pl
          - pt
          - pt-br
          - ro
          - ru
          - sk
          - sl
          - sq
          - sr
          - sr-latn
          - sv
          - sw
          - ta
          - te
          - tg
          - th
          - tk
          - tr
          - tt
          - udm
          - uk
          - ur
          - uz
          - vi
          - zh-hans
          - zh-hant
      tags:
      - schema
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/vnd.oai.openapi:
              schema:
                type: object
                additionalProperties: {}
            application/yaml:
              schema:
                type: object
                additionalProperties: {}
            application/vnd.oai.openapi+json:
              schema:
                type: object
                additionalProperties: {}
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
  /api/user/{id}:
    get:
      operationId: user_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - user
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /api/user/{user_id}/profile:
    get:
      operationId: user_profile_retrieve
      parameters:
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - user
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
          description: ''
    put:
      operationId: user_profile_update
      parameters:
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProfileRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProfileRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProfileRequest'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
          description: ''
    patch:
      operationId: user_profile_partial_update
      parameters:
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProfileRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProfileRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProfileRequest'
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
          description: ''
  /api/user/{user_id}/profile/avatar:
    put:
      operationId: user_profile_avatar_update
      parameters:
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - user
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProfileAvatarRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProfileAvatarRequest'
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileAvatar'
          description: ''
    patch:
      operationId: user_profile_avatar_partial_update
      parameters:
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - user
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProfileAvatarRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProfileAvatarRequest'
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileAvatar'
          description: ''
  /api/user/current:
    get:
      operationId: user_current_retrieve
      tags:
      - user
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /api/user/login:
    post:
      operationId: user_login_create
      description: Provides user login
      tags:
      - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequestRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/LoginRequestRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/LoginRequestRequest'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: User was logged in
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
          description: Wrong credentials
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
          description: Generic server error
  /api/user/logout:
    post:
      operationId: user_logout_create
      description: Logouts user from the system
      tags:
      - user
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: User was logged out
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
          description: Generic server error
  /api/user/register:
    post:
      operationId: register_user
      description: |-
        Endpoint for user registration

        Creates both User and related Profile models
      tags:
      - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegisterRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRegisterRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRegisterRequest'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '201':
          description: User was registered
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
          description: Validation error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
          description: Generic server error
components:
  schemas:
    Competency:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
      required:
      - name
    Exception:
      type: object
      properties:
        status_code:
          type: integer
        detail:
          type: string
    FollowupEnum:
      enum:
      - FILL_PROFILE
      - NONE
      type: string
      description: |-
        * `FILL_PROFILE` - Fill your user profile
        * `NONE` - No followup action
    LoginRequestRequest:
      type: object
      properties:
        username:
          type: string
          minLength: 1
        password:
          type: string
          minLength: 1
      required:
      - password
      - username
    Meeting:
      type: object
      properties:
        pk:
          type: integer
          readOnly: true
          title: ID
        subject:
          type: string
          title: Name
          maxLength: 240
        location:
          type: string
        dateTime:
          type: string
          format: date-time
          readOnly: true
          title: Registration Date
        mentorEmail:
          type: string
          format: email
          maxLength: 254
        menteeEmail:
          type: string
          format: email
          maxLength: 254
      required:
      - location
      - menteeEmail
      - mentorEmail
      - subject
    MeetingRequest:
      type: object
      properties:
        subject:
          type: string
          minLength: 1
          title: Name
          maxLength: 240
        location:
          type: string
          minLength: 1
        mentorEmail:
          type: string
          format: email
          minLength: 1
          maxLength: 254
        menteeEmail:
          type: string
          format: email
          minLength: 1
          maxLength: 254
      required:
      - location
      - menteeEmail
      - mentorEmail
      - subject
    Notification:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        source:
          type: string
          nullable: true
          maxLength: 255
        created_at:
          type: string
          format: date-time
          readOnly: true
        seen:
          type: boolean
        title:
          type: string
          maxLength: 255
        followup:
          $ref: '#/components/schemas/FollowupEnum'
        content:
          type: string
          maxLength: 255
        user:
          type: integer
      required:
      - content
      - seen
      - title
      - user
    PatchedMeetingRequest:
      type: object
      properties:
        subject:
          type: string
          minLength: 1
          title: Name
          maxLength: 240
        location:
          type: string
          minLength: 1
        mentorEmail:
          type: string
          format: email
          minLength: 1
          maxLength: 254
        menteeEmail:
          type: string
          format: email
          minLength: 1
          maxLength: 254
    PatchedProfileAvatarRequest:
      type: object
      properties:
        avatar:
          type: string
          format: binary
          nullable: true
          pattern: (?:jpg|jpeg|png)$
    PatchedProfileRequest:
      type: object
      properties:
        accepts_mentees:
          type: boolean
        about:
          type: string
          minLength: 1
        contact:
          type: string
          minLength: 1
        skills:
          type: string
          minLength: 1
        user:
          type: integer
        avatar:
          type: string
          format: binary
          nullable: true
          pattern: (?:jpg|jpeg|png)$
        competencies:
          type: array
          items:
            type: integer
    Profile:
      type: object
      properties:
        accepts_mentees:
          type: boolean
        about:
          type: string
        contact:
          type: string
        skills:
          type: string
        id:
          type: integer
          readOnly: true
        user:
          type: integer
        avatar:
          type: string
          format: uri
          nullable: true
          pattern: (?:jpg|jpeg|png)$
        competencies:
          type: array
          items:
            type: integer
      required:
      - competencies
      - user
    ProfileAvatar:
      type: object
      properties:
        avatar:
          type: string
          format: uri
          nullable: true
          pattern: (?:jpg|jpeg|png)$
    ProfileAvatarRequest:
      type: object
      properties:
        avatar:
          type: string
          format: binary
          nullable: true
          pattern: (?:jpg|jpeg|png)$
    ProfileRequest:
      type: object
      properties:
        accepts_mentees:
          type: boolean
        about:
          type: string
          minLength: 1
        contact:
          type: string
          minLength: 1
        skills:
          type: string
          minLength: 1
        user:
          type: integer
        avatar:
          type: string
          format: binary
          nullable: true
          pattern: (?:jpg|jpeg|png)$
        competencies:
          type: array
          items:
            type: integer
      required:
      - competencies
      - user
    User:
      type: object
      properties:
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        id:
          type: integer
          readOnly: true
        groups:
          type: array
          items:
            type: integer
          description: The groups this user belongs to. A user will get all permissions
            granted to each of their groups.
        user_permissions:
          type: array
          items:
            type: integer
          description: Specific permissions for this user.
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        is_staff:
          type: boolean
          title: Staff status
          description: Designates whether the user can log into this admin site.
        profile:
          allOf:
          - $ref: '#/components/schemas/Profile'
          readOnly: true
      required:
      - username
    UserRegisterRequest:
      type: object
      properties:
        username:
          type: string
          minLength: 1
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        password:
          type: string
          writeOnly: true
          minLength: 1
          maxLength: 128
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
      required:
      - password
      - username
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
