/**
 * Generated by @openapi-codegen
 *
 * @version 1.0.0
 */
import * as reactQuery from '@tanstack/react-query'
import {
  useGeneratedApiContext,
  GeneratedApiContext,
} from './generatedApiContext'
import type * as Fetcher from './generatedApiFetcher'
import { generatedApiFetch } from './generatedApiFetcher'
import type * as Schemas from './generatedApiSchemas'
import type { ClientErrorStatus, ServerErrorStatus } from './generatedApiUtils'

export type CompetencyAllListError = Fetcher.ErrorWrapper<undefined>

export type CompetencyAllListResponse = Schemas.Competency[]

export type CompetencyAllListVariables = GeneratedApiContext['fetcherOptions']

export const fetchCompetencyAllList = (
  variables: CompetencyAllListVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<
    CompetencyAllListResponse,
    CompetencyAllListError,
    undefined,
    {},
    {},
    {}
  >({ url: '/api/competency/all', method: 'get', ...variables, signal })

export const useCompetencyAllList = <TData = CompetencyAllListResponse>(
  variables: CompetencyAllListVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      CompetencyAllListResponse,
      CompetencyAllListError,
      TData
    >,
    'queryKey' | 'queryFn' | 'initialData'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGeneratedApiContext(options)
  return reactQuery.useQuery<
    CompetencyAllListResponse,
    CompetencyAllListError,
    TData
  >({
    queryKey: queryKeyFn({
      path: '/api/competency/all',
      operationId: 'competencyAllList',
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchCompetencyAllList({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type ConnectionsListError = Fetcher.ErrorWrapper<undefined>

export type ConnectionsListResponse = Schemas.ConnectionListItem[]

export type ConnectionsListVariables = GeneratedApiContext['fetcherOptions']

export const fetchConnectionsList = (
  variables: ConnectionsListVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<
    ConnectionsListResponse,
    ConnectionsListError,
    undefined,
    {},
    {},
    {}
  >({ url: '/api/connections', method: 'get', ...variables, signal })

export const useConnectionsList = <TData = ConnectionsListResponse>(
  variables: ConnectionsListVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ConnectionsListResponse,
      ConnectionsListError,
      TData
    >,
    'queryKey' | 'queryFn' | 'initialData'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGeneratedApiContext(options)
  return reactQuery.useQuery<
    ConnectionsListResponse,
    ConnectionsListError,
    TData
  >({
    queryKey: queryKeyFn({
      path: '/api/connections',
      operationId: 'connectionsList',
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchConnectionsList({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type ConnectionsDeleteDestroyPathParams = {
  id: number
}

export type ConnectionsDeleteDestroyError = Fetcher.ErrorWrapper<undefined>

export type ConnectionsDeleteDestroyVariables = {
  pathParams: ConnectionsDeleteDestroyPathParams
} & GeneratedApiContext['fetcherOptions']

export const fetchConnectionsDeleteDestroy = (
  variables: ConnectionsDeleteDestroyVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<
    undefined,
    ConnectionsDeleteDestroyError,
    undefined,
    {},
    {},
    ConnectionsDeleteDestroyPathParams
  >({
    url: '/api/connections/{id}/delete',
    method: 'delete',
    ...variables,
    signal,
  })

export const useConnectionsDeleteDestroy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ConnectionsDeleteDestroyError,
      ConnectionsDeleteDestroyVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = useGeneratedApiContext()
  return reactQuery.useMutation<
    undefined,
    ConnectionsDeleteDestroyError,
    ConnectionsDeleteDestroyVariables
  >({
    mutationFn: (variables: ConnectionsDeleteDestroyVariables) =>
      fetchConnectionsDeleteDestroy({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type ConnectionsRequestsListError = Fetcher.ErrorWrapper<undefined>

export type ConnectionsRequestsListResponse = Schemas.ConnectionRequest[]

export type ConnectionsRequestsListVariables =
  GeneratedApiContext['fetcherOptions']

export const fetchConnectionsRequestsList = (
  variables: ConnectionsRequestsListVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<
    ConnectionsRequestsListResponse,
    ConnectionsRequestsListError,
    undefined,
    {},
    {},
    {}
  >({ url: '/api/connections/requests', method: 'get', ...variables, signal })

export const useConnectionsRequestsList = <
  TData = ConnectionsRequestsListResponse
>(
  variables: ConnectionsRequestsListVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ConnectionsRequestsListResponse,
      ConnectionsRequestsListError,
      TData
    >,
    'queryKey' | 'queryFn' | 'initialData'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGeneratedApiContext(options)
  return reactQuery.useQuery<
    ConnectionsRequestsListResponse,
    ConnectionsRequestsListError,
    TData
  >({
    queryKey: queryKeyFn({
      path: '/api/connections/requests',
      operationId: 'connectionsRequestsList',
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchConnectionsRequestsList({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type ConnectionsRequestsDestroyPathParams = {
  id: number
}

export type ConnectionsRequestsDestroyError = Fetcher.ErrorWrapper<undefined>

export type ConnectionsRequestsDestroyVariables = {
  pathParams: ConnectionsRequestsDestroyPathParams
} & GeneratedApiContext['fetcherOptions']

export const fetchConnectionsRequestsDestroy = (
  variables: ConnectionsRequestsDestroyVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<
    undefined,
    ConnectionsRequestsDestroyError,
    undefined,
    {},
    {},
    ConnectionsRequestsDestroyPathParams
  >({
    url: '/api/connections/requests/{id}',
    method: 'delete',
    ...variables,
    signal,
  })

export const useConnectionsRequestsDestroy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ConnectionsRequestsDestroyError,
      ConnectionsRequestsDestroyVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = useGeneratedApiContext()
  return reactQuery.useMutation<
    undefined,
    ConnectionsRequestsDestroyError,
    ConnectionsRequestsDestroyVariables
  >({
    mutationFn: (variables: ConnectionsRequestsDestroyVariables) =>
      fetchConnectionsRequestsDestroy({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type ConnectionsRequestsAcceptCreatePathParams = {
  id: number
}

export type ConnectionsRequestsAcceptCreateError =
  Fetcher.ErrorWrapper<undefined>

export type ConnectionsRequestsAcceptCreateVariables = {
  pathParams: ConnectionsRequestsAcceptCreatePathParams
} & GeneratedApiContext['fetcherOptions']

export const fetchConnectionsRequestsAcceptCreate = (
  variables: ConnectionsRequestsAcceptCreateVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<
    undefined,
    ConnectionsRequestsAcceptCreateError,
    undefined,
    {},
    {},
    ConnectionsRequestsAcceptCreatePathParams
  >({
    url: '/api/connections/requests/{id}/accept',
    method: 'post',
    ...variables,
    signal,
  })

export const useConnectionsRequestsAcceptCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ConnectionsRequestsAcceptCreateError,
      ConnectionsRequestsAcceptCreateVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = useGeneratedApiContext()
  return reactQuery.useMutation<
    undefined,
    ConnectionsRequestsAcceptCreateError,
    ConnectionsRequestsAcceptCreateVariables
  >({
    mutationFn: (variables: ConnectionsRequestsAcceptCreateVariables) =>
      fetchConnectionsRequestsAcceptCreate({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type ConnectionsRequestsMakeCreateError = Fetcher.ErrorWrapper<undefined>

export type ConnectionsRequestsMakeCreateVariables = {
  body: Schemas.ConnectionRequestCreateRequest
} & GeneratedApiContext['fetcherOptions']

export const fetchConnectionsRequestsMakeCreate = (
  variables: ConnectionsRequestsMakeCreateVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<
    Schemas.ConnectionRequestCreate,
    ConnectionsRequestsMakeCreateError,
    Schemas.ConnectionRequestCreateRequest,
    {},
    {},
    {}
  >({
    url: '/api/connections/requests/make',
    method: 'post',
    ...variables,
    signal,
  })

export const useConnectionsRequestsMakeCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ConnectionRequestCreate,
      ConnectionsRequestsMakeCreateError,
      ConnectionsRequestsMakeCreateVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = useGeneratedApiContext()
  return reactQuery.useMutation<
    Schemas.ConnectionRequestCreate,
    ConnectionsRequestsMakeCreateError,
    ConnectionsRequestsMakeCreateVariables
  >({
    mutationFn: (variables: ConnectionsRequestsMakeCreateVariables) =>
      fetchConnectionsRequestsMakeCreate({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type MeetingListError = Fetcher.ErrorWrapper<undefined>

export type MeetingListResponse = Schemas.Meeting[]

export type MeetingListVariables = GeneratedApiContext['fetcherOptions']

export const fetchMeetingList = (
  variables: MeetingListVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<
    MeetingListResponse,
    MeetingListError,
    undefined,
    {},
    {},
    {}
  >({ url: '/api/meeting/', method: 'get', ...variables, signal })

export const useMeetingList = <TData = MeetingListResponse>(
  variables: MeetingListVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<MeetingListResponse, MeetingListError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGeneratedApiContext(options)
  return reactQuery.useQuery<MeetingListResponse, MeetingListError, TData>({
    queryKey: queryKeyFn({
      path: '/api/meeting/',
      operationId: 'meetingList',
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchMeetingList({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type MeetingDeleteDestroyPathParams = {
  id: number
}

export type MeetingDeleteDestroyError = Fetcher.ErrorWrapper<undefined>

export type MeetingDeleteDestroyVariables = {
  pathParams: MeetingDeleteDestroyPathParams
} & GeneratedApiContext['fetcherOptions']

export const fetchMeetingDeleteDestroy = (
  variables: MeetingDeleteDestroyVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<
    undefined,
    MeetingDeleteDestroyError,
    undefined,
    {},
    {},
    MeetingDeleteDestroyPathParams
  >({ url: '/api/meeting/{id}/delete', method: 'delete', ...variables, signal })

export const useMeetingDeleteDestroy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      MeetingDeleteDestroyError,
      MeetingDeleteDestroyVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = useGeneratedApiContext()
  return reactQuery.useMutation<
    undefined,
    MeetingDeleteDestroyError,
    MeetingDeleteDestroyVariables
  >({
    mutationFn: (variables: MeetingDeleteDestroyVariables) =>
      fetchMeetingDeleteDestroy({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type MeetingUpdateUpdatePathParams = {
  id: number
}

export type MeetingUpdateUpdateError = Fetcher.ErrorWrapper<undefined>

export type MeetingUpdateUpdateVariables = {
  body: Schemas.MeetingCreateRequest
  pathParams: MeetingUpdateUpdatePathParams
} & GeneratedApiContext['fetcherOptions']

export const fetchMeetingUpdateUpdate = (
  variables: MeetingUpdateUpdateVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<
    Schemas.MeetingCreate,
    MeetingUpdateUpdateError,
    Schemas.MeetingCreateRequest,
    {},
    {},
    MeetingUpdateUpdatePathParams
  >({ url: '/api/meeting/{id}/update', method: 'put', ...variables, signal })

export const useMeetingUpdateUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.MeetingCreate,
      MeetingUpdateUpdateError,
      MeetingUpdateUpdateVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = useGeneratedApiContext()
  return reactQuery.useMutation<
    Schemas.MeetingCreate,
    MeetingUpdateUpdateError,
    MeetingUpdateUpdateVariables
  >({
    mutationFn: (variables: MeetingUpdateUpdateVariables) =>
      fetchMeetingUpdateUpdate({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type MeetingUpdatePartialUpdatePathParams = {
  id: number
}

export type MeetingUpdatePartialUpdateError = Fetcher.ErrorWrapper<undefined>

export type MeetingUpdatePartialUpdateVariables = {
  body?: Schemas.PatchedMeetingCreateRequest
  pathParams: MeetingUpdatePartialUpdatePathParams
} & GeneratedApiContext['fetcherOptions']

export const fetchMeetingUpdatePartialUpdate = (
  variables: MeetingUpdatePartialUpdateVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<
    Schemas.MeetingCreate,
    MeetingUpdatePartialUpdateError,
    Schemas.PatchedMeetingCreateRequest,
    {},
    {},
    MeetingUpdatePartialUpdatePathParams
  >({ url: '/api/meeting/{id}/update', method: 'patch', ...variables, signal })

export const useMeetingUpdatePartialUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.MeetingCreate,
      MeetingUpdatePartialUpdateError,
      MeetingUpdatePartialUpdateVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = useGeneratedApiContext()
  return reactQuery.useMutation<
    Schemas.MeetingCreate,
    MeetingUpdatePartialUpdateError,
    MeetingUpdatePartialUpdateVariables
  >({
    mutationFn: (variables: MeetingUpdatePartialUpdateVariables) =>
      fetchMeetingUpdatePartialUpdate({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type MeetingCreateCreateError = Fetcher.ErrorWrapper<undefined>

export type MeetingCreateCreateVariables = {
  body: Schemas.MeetingCreateRequest
} & GeneratedApiContext['fetcherOptions']

export const fetchMeetingCreateCreate = (
  variables: MeetingCreateCreateVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<
    Schemas.MeetingCreate,
    MeetingCreateCreateError,
    Schemas.MeetingCreateRequest,
    {},
    {},
    {}
  >({ url: '/api/meeting/create/', method: 'post', ...variables, signal })

export const useMeetingCreateCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.MeetingCreate,
      MeetingCreateCreateError,
      MeetingCreateCreateVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = useGeneratedApiContext()
  return reactQuery.useMutation<
    Schemas.MeetingCreate,
    MeetingCreateCreateError,
    MeetingCreateCreateVariables
  >({
    mutationFn: (variables: MeetingCreateCreateVariables) =>
      fetchMeetingCreateCreate({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type MeetingFromMentorsListError = Fetcher.ErrorWrapper<undefined>

export type MeetingFromMentorsListResponse = Schemas.Meeting[]

export type MeetingFromMentorsListVariables =
  GeneratedApiContext['fetcherOptions']

export const fetchMeetingFromMentorsList = (
  variables: MeetingFromMentorsListVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<
    MeetingFromMentorsListResponse,
    MeetingFromMentorsListError,
    undefined,
    {},
    {},
    {}
  >({ url: '/api/meeting/from-mentors', method: 'get', ...variables, signal })

export const useMeetingFromMentorsList = <
  TData = MeetingFromMentorsListResponse
>(
  variables: MeetingFromMentorsListVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      MeetingFromMentorsListResponse,
      MeetingFromMentorsListError,
      TData
    >,
    'queryKey' | 'queryFn' | 'initialData'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGeneratedApiContext(options)
  return reactQuery.useQuery<
    MeetingFromMentorsListResponse,
    MeetingFromMentorsListError,
    TData
  >({
    queryKey: queryKeyFn({
      path: '/api/meeting/from-mentors',
      operationId: 'meetingFromMentorsList',
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchMeetingFromMentorsList({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type MentoringRetrievePathParams = {
  id: number
}

export type MentoringRetrieveError = Fetcher.ErrorWrapper<undefined>

export type MentoringRetrieveVariables = {
  pathParams: MentoringRetrievePathParams
} & GeneratedApiContext['fetcherOptions']

export const fetchMentoringRetrieve = (
  variables: MentoringRetrieveVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<
    Schemas.Mentoring,
    MentoringRetrieveError,
    undefined,
    {},
    {},
    MentoringRetrievePathParams
  >({ url: '/api/mentoring/{id}/', method: 'get', ...variables, signal })

export const useMentoringRetrieve = <TData = Schemas.Mentoring>(
  variables: MentoringRetrieveVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Mentoring,
      MentoringRetrieveError,
      TData
    >,
    'queryKey' | 'queryFn' | 'initialData'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGeneratedApiContext(options)
  return reactQuery.useQuery<Schemas.Mentoring, MentoringRetrieveError, TData>({
    queryKey: queryKeyFn({
      path: '/api/mentoring/{id}/',
      operationId: 'mentoringRetrieve',
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchMentoringRetrieve({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type MentoringDeleteDestroyPathParams = {
  id: number
}

export type MentoringDeleteDestroyError = Fetcher.ErrorWrapper<undefined>

export type MentoringDeleteDestroyVariables = {
  pathParams: MentoringDeleteDestroyPathParams
} & GeneratedApiContext['fetcherOptions']

export const fetchMentoringDeleteDestroy = (
  variables: MentoringDeleteDestroyVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<
    undefined,
    MentoringDeleteDestroyError,
    undefined,
    {},
    {},
    MentoringDeleteDestroyPathParams
  >({
    url: '/api/mentoring/{id}/delete/',
    method: 'delete',
    ...variables,
    signal,
  })

export const useMentoringDeleteDestroy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      MentoringDeleteDestroyError,
      MentoringDeleteDestroyVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = useGeneratedApiContext()
  return reactQuery.useMutation<
    undefined,
    MentoringDeleteDestroyError,
    MentoringDeleteDestroyVariables
  >({
    mutationFn: (variables: MentoringDeleteDestroyVariables) =>
      fetchMentoringDeleteDestroy({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type MentoringEditUpdatePathParams = {
  id: number
}

export type MentoringEditUpdateError = Fetcher.ErrorWrapper<undefined>

export type MentoringEditUpdateVariables = {
  body: Schemas.MentoringRequest
  pathParams: MentoringEditUpdatePathParams
} & GeneratedApiContext['fetcherOptions']

export const fetchMentoringEditUpdate = (
  variables: MentoringEditUpdateVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<
    Schemas.Mentoring,
    MentoringEditUpdateError,
    Schemas.MentoringRequest,
    {},
    {},
    MentoringEditUpdatePathParams
  >({ url: '/api/mentoring/{id}/edit/', method: 'put', ...variables, signal })

export const useMentoringEditUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Mentoring,
      MentoringEditUpdateError,
      MentoringEditUpdateVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = useGeneratedApiContext()
  return reactQuery.useMutation<
    Schemas.Mentoring,
    MentoringEditUpdateError,
    MentoringEditUpdateVariables
  >({
    mutationFn: (variables: MentoringEditUpdateVariables) =>
      fetchMentoringEditUpdate({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type MentoringEditPartialUpdatePathParams = {
  id: number
}

export type MentoringEditPartialUpdateError = Fetcher.ErrorWrapper<undefined>

export type MentoringEditPartialUpdateVariables = {
  body?: Schemas.PatchedMentoringRequest
  pathParams: MentoringEditPartialUpdatePathParams
} & GeneratedApiContext['fetcherOptions']

export const fetchMentoringEditPartialUpdate = (
  variables: MentoringEditPartialUpdateVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<
    Schemas.Mentoring,
    MentoringEditPartialUpdateError,
    Schemas.PatchedMentoringRequest,
    {},
    {},
    MentoringEditPartialUpdatePathParams
  >({ url: '/api/mentoring/{id}/edit/', method: 'patch', ...variables, signal })

export const useMentoringEditPartialUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Mentoring,
      MentoringEditPartialUpdateError,
      MentoringEditPartialUpdateVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = useGeneratedApiContext()
  return reactQuery.useMutation<
    Schemas.Mentoring,
    MentoringEditPartialUpdateError,
    MentoringEditPartialUpdateVariables
  >({
    mutationFn: (variables: MentoringEditPartialUpdateVariables) =>
      fetchMentoringEditPartialUpdate({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type MentoringAsMenteeListError = Fetcher.ErrorWrapper<undefined>

export type MentoringAsMenteeListResponse = Schemas.Mentoring[]

export type MentoringAsMenteeListVariables =
  GeneratedApiContext['fetcherOptions']

export const fetchMentoringAsMenteeList = (
  variables: MentoringAsMenteeListVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<
    MentoringAsMenteeListResponse,
    MentoringAsMenteeListError,
    undefined,
    {},
    {},
    {}
  >({ url: '/api/mentoring/as-mentee/', method: 'get', ...variables, signal })

export const useMentoringAsMenteeList = <TData = MentoringAsMenteeListResponse>(
  variables: MentoringAsMenteeListVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      MentoringAsMenteeListResponse,
      MentoringAsMenteeListError,
      TData
    >,
    'queryKey' | 'queryFn' | 'initialData'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGeneratedApiContext(options)
  return reactQuery.useQuery<
    MentoringAsMenteeListResponse,
    MentoringAsMenteeListError,
    TData
  >({
    queryKey: queryKeyFn({
      path: '/api/mentoring/as-mentee/',
      operationId: 'mentoringAsMenteeList',
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchMentoringAsMenteeList({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type MentoringAsMentorListError = Fetcher.ErrorWrapper<undefined>

export type MentoringAsMentorListResponse = Schemas.Mentoring[]

export type MentoringAsMentorListVariables =
  GeneratedApiContext['fetcherOptions']

export const fetchMentoringAsMentorList = (
  variables: MentoringAsMentorListVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<
    MentoringAsMentorListResponse,
    MentoringAsMentorListError,
    undefined,
    {},
    {},
    {}
  >({ url: '/api/mentoring/as-mentor/', method: 'get', ...variables, signal })

export const useMentoringAsMentorList = <TData = MentoringAsMentorListResponse>(
  variables: MentoringAsMentorListVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      MentoringAsMentorListResponse,
      MentoringAsMentorListError,
      TData
    >,
    'queryKey' | 'queryFn' | 'initialData'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGeneratedApiContext(options)
  return reactQuery.useQuery<
    MentoringAsMentorListResponse,
    MentoringAsMentorListError,
    TData
  >({
    queryKey: queryKeyFn({
      path: '/api/mentoring/as-mentor/',
      operationId: 'mentoringAsMentorList',
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchMentoringAsMentorList({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type MentoringRequestsAcceptDestroyPathParams = {
  mentoringRequestId: number
}

export type MentoringRequestsAcceptDestroyError =
  Fetcher.ErrorWrapper<undefined>

export type MentoringRequestsAcceptDestroyVariables = {
  pathParams: MentoringRequestsAcceptDestroyPathParams
} & GeneratedApiContext['fetcherOptions']

export const fetchMentoringRequestsAcceptDestroy = (
  variables: MentoringRequestsAcceptDestroyVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<
    undefined,
    MentoringRequestsAcceptDestroyError,
    undefined,
    {},
    {},
    MentoringRequestsAcceptDestroyPathParams
  >({
    url: '/api/mentoring/requests/accept/{mentoringRequestId}/',
    method: 'delete',
    ...variables,
    signal,
  })

export const useMentoringRequestsAcceptDestroy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      MentoringRequestsAcceptDestroyError,
      MentoringRequestsAcceptDestroyVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = useGeneratedApiContext()
  return reactQuery.useMutation<
    undefined,
    MentoringRequestsAcceptDestroyError,
    MentoringRequestsAcceptDestroyVariables
  >({
    mutationFn: (variables: MentoringRequestsAcceptDestroyVariables) =>
      fetchMentoringRequestsAcceptDestroy({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type MentoringRequestsCreateCreatePathParams = {
  toUserId: number
}

export type MentoringRequestsCreateCreateError = Fetcher.ErrorWrapper<undefined>

export type MentoringRequestsCreateCreateVariables = {
  body: Schemas.CreateRequestRequest
  pathParams: MentoringRequestsCreateCreatePathParams
} & GeneratedApiContext['fetcherOptions']

export const fetchMentoringRequestsCreateCreate = (
  variables: MentoringRequestsCreateCreateVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<
    Schemas.CreateRequest,
    MentoringRequestsCreateCreateError,
    Schemas.CreateRequestRequest,
    {},
    {},
    MentoringRequestsCreateCreatePathParams
  >({
    url: '/api/mentoring/requests/create/{toUserId}/',
    method: 'post',
    ...variables,
    signal,
  })

export const useMentoringRequestsCreateCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.CreateRequest,
      MentoringRequestsCreateCreateError,
      MentoringRequestsCreateCreateVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = useGeneratedApiContext()
  return reactQuery.useMutation<
    Schemas.CreateRequest,
    MentoringRequestsCreateCreateError,
    MentoringRequestsCreateCreateVariables
  >({
    mutationFn: (variables: MentoringRequestsCreateCreateVariables) =>
      fetchMentoringRequestsCreateCreate({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type MentoringRequestsDeleteDestroyPathParams = {
  id: number
}

export type MentoringRequestsDeleteDestroyError =
  Fetcher.ErrorWrapper<undefined>

export type MentoringRequestsDeleteDestroyVariables = {
  pathParams: MentoringRequestsDeleteDestroyPathParams
} & GeneratedApiContext['fetcherOptions']

export const fetchMentoringRequestsDeleteDestroy = (
  variables: MentoringRequestsDeleteDestroyVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<
    undefined,
    MentoringRequestsDeleteDestroyError,
    undefined,
    {},
    {},
    MentoringRequestsDeleteDestroyPathParams
  >({
    url: '/api/mentoring/requests/delete/{id}/',
    method: 'delete',
    ...variables,
    signal,
  })

export const useMentoringRequestsDeleteDestroy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      MentoringRequestsDeleteDestroyError,
      MentoringRequestsDeleteDestroyVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = useGeneratedApiContext()
  return reactQuery.useMutation<
    undefined,
    MentoringRequestsDeleteDestroyError,
    MentoringRequestsDeleteDestroyVariables
  >({
    mutationFn: (variables: MentoringRequestsDeleteDestroyVariables) =>
      fetchMentoringRequestsDeleteDestroy({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type MentoringRequestsFromUserListError = Fetcher.ErrorWrapper<undefined>

export type MentoringRequestsFromUserListResponse =
  Schemas.RequestForMentoring[]

export type MentoringRequestsFromUserListVariables =
  GeneratedApiContext['fetcherOptions']

export const fetchMentoringRequestsFromUserList = (
  variables: MentoringRequestsFromUserListVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<
    MentoringRequestsFromUserListResponse,
    MentoringRequestsFromUserListError,
    undefined,
    {},
    {},
    {}
  >({
    url: '/api/mentoring/requests/from-user/',
    method: 'get',
    ...variables,
    signal,
  })

export const useMentoringRequestsFromUserList = <
  TData = MentoringRequestsFromUserListResponse
>(
  variables: MentoringRequestsFromUserListVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      MentoringRequestsFromUserListResponse,
      MentoringRequestsFromUserListError,
      TData
    >,
    'queryKey' | 'queryFn' | 'initialData'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGeneratedApiContext(options)
  return reactQuery.useQuery<
    MentoringRequestsFromUserListResponse,
    MentoringRequestsFromUserListError,
    TData
  >({
    queryKey: queryKeyFn({
      path: '/api/mentoring/requests/from-user/',
      operationId: 'mentoringRequestsFromUserList',
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchMentoringRequestsFromUserList(
        { ...fetcherOptions, ...variables },
        signal
      ),
    ...options,
    ...queryOptions,
  })
}

export type MentoringRequestsToUserListError = Fetcher.ErrorWrapper<undefined>

export type MentoringRequestsToUserListResponse = Schemas.RequestForMentoring[]

export type MentoringRequestsToUserListVariables =
  GeneratedApiContext['fetcherOptions']

export const fetchMentoringRequestsToUserList = (
  variables: MentoringRequestsToUserListVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<
    MentoringRequestsToUserListResponse,
    MentoringRequestsToUserListError,
    undefined,
    {},
    {},
    {}
  >({
    url: '/api/mentoring/requests/to-user/',
    method: 'get',
    ...variables,
    signal,
  })

export const useMentoringRequestsToUserList = <
  TData = MentoringRequestsToUserListResponse
>(
  variables: MentoringRequestsToUserListVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      MentoringRequestsToUserListResponse,
      MentoringRequestsToUserListError,
      TData
    >,
    'queryKey' | 'queryFn' | 'initialData'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGeneratedApiContext(options)
  return reactQuery.useQuery<
    MentoringRequestsToUserListResponse,
    MentoringRequestsToUserListError,
    TData
  >({
    queryKey: queryKeyFn({
      path: '/api/mentoring/requests/to-user/',
      operationId: 'mentoringRequestsToUserList',
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchMentoringRequestsToUserList(
        { ...fetcherOptions, ...variables },
        signal
      ),
    ...options,
    ...queryOptions,
  })
}

export type MessagesAllListError = Fetcher.ErrorWrapper<undefined>

export type MessagesAllListResponse = Schemas.Message[]

export type MessagesAllListVariables = GeneratedApiContext['fetcherOptions']

export const fetchMessagesAllList = (
  variables: MessagesAllListVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<
    MessagesAllListResponse,
    MessagesAllListError,
    undefined,
    {},
    {},
    {}
  >({ url: '/api/messages/all/', method: 'get', ...variables, signal })

export const useMessagesAllList = <TData = MessagesAllListResponse>(
  variables: MessagesAllListVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      MessagesAllListResponse,
      MessagesAllListError,
      TData
    >,
    'queryKey' | 'queryFn' | 'initialData'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGeneratedApiContext(options)
  return reactQuery.useQuery<
    MessagesAllListResponse,
    MessagesAllListError,
    TData
  >({
    queryKey: queryKeyFn({
      path: '/api/messages/all/',
      operationId: 'messagesAllList',
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchMessagesAllList({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type MessagesAllUsersListError = Fetcher.ErrorWrapper<undefined>

export type MessagesAllUsersListResponse = Schemas.User[]

export type MessagesAllUsersListVariables =
  GeneratedApiContext['fetcherOptions']

export const fetchMessagesAllUsersList = (
  variables: MessagesAllUsersListVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<
    MessagesAllUsersListResponse,
    MessagesAllUsersListError,
    undefined,
    {},
    {},
    {}
  >({ url: '/api/messages/all-users/', method: 'get', ...variables, signal })

export const useMessagesAllUsersList = <TData = MessagesAllUsersListResponse>(
  variables: MessagesAllUsersListVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      MessagesAllUsersListResponse,
      MessagesAllUsersListError,
      TData
    >,
    'queryKey' | 'queryFn' | 'initialData'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGeneratedApiContext(options)
  return reactQuery.useQuery<
    MessagesAllUsersListResponse,
    MessagesAllUsersListError,
    TData
  >({
    queryKey: queryKeyFn({
      path: '/api/messages/all-users/',
      operationId: 'messagesAllUsersList',
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchMessagesAllUsersList({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type MessagesMarkSeenUpdateError = Fetcher.ErrorWrapper<undefined>

export type MessagesMarkSeenUpdateVariables =
  GeneratedApiContext['fetcherOptions']

export const fetchMessagesMarkSeenUpdate = (
  variables: MessagesMarkSeenUpdateVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<
    undefined,
    MessagesMarkSeenUpdateError,
    undefined,
    {},
    {},
    {}
  >({ url: '/api/messages/mark-seen/', method: 'put', ...variables, signal })

export const useMessagesMarkSeenUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      MessagesMarkSeenUpdateError,
      MessagesMarkSeenUpdateVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = useGeneratedApiContext()
  return reactQuery.useMutation<
    undefined,
    MessagesMarkSeenUpdateError,
    MessagesMarkSeenUpdateVariables
  >({
    mutationFn: (variables: MessagesMarkSeenUpdateVariables) =>
      fetchMessagesMarkSeenUpdate({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type MessagesMarkSeenPartialUpdateError = Fetcher.ErrorWrapper<undefined>

export type MessagesMarkSeenPartialUpdateVariables =
  GeneratedApiContext['fetcherOptions']

export const fetchMessagesMarkSeenPartialUpdate = (
  variables: MessagesMarkSeenPartialUpdateVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<
    undefined,
    MessagesMarkSeenPartialUpdateError,
    undefined,
    {},
    {},
    {}
  >({ url: '/api/messages/mark-seen/', method: 'patch', ...variables, signal })

export const useMessagesMarkSeenPartialUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      MessagesMarkSeenPartialUpdateError,
      MessagesMarkSeenPartialUpdateVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = useGeneratedApiContext()
  return reactQuery.useMutation<
    undefined,
    MessagesMarkSeenPartialUpdateError,
    MessagesMarkSeenPartialUpdateVariables
  >({
    mutationFn: (variables: MessagesMarkSeenPartialUpdateVariables) =>
      fetchMessagesMarkSeenPartialUpdate({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type MessagesSendCreateError = Fetcher.ErrorWrapper<undefined>

export type MessagesSendCreateVariables = {
  body: Schemas.MessageSendRequest
} & GeneratedApiContext['fetcherOptions']

export const fetchMessagesSendCreate = (
  variables: MessagesSendCreateVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<
    Schemas.MessageSend,
    MessagesSendCreateError,
    Schemas.MessageSendRequest,
    {},
    {},
    {}
  >({ url: '/api/messages/send/', method: 'post', ...variables, signal })

export const useMessagesSendCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.MessageSend,
      MessagesSendCreateError,
      MessagesSendCreateVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = useGeneratedApiContext()
  return reactQuery.useMutation<
    Schemas.MessageSend,
    MessagesSendCreateError,
    MessagesSendCreateVariables
  >({
    mutationFn: (variables: MessagesSendCreateVariables) =>
      fetchMessagesSendCreate({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type MessagesUnseenListError = Fetcher.ErrorWrapper<undefined>

export type MessagesUnseenListResponse = Schemas.Message[]

export type MessagesUnseenListVariables = GeneratedApiContext['fetcherOptions']

export const fetchMessagesUnseenList = (
  variables: MessagesUnseenListVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<
    MessagesUnseenListResponse,
    MessagesUnseenListError,
    undefined,
    {},
    {},
    {}
  >({ url: '/api/messages/unseen/', method: 'get', ...variables, signal })

export const useMessagesUnseenList = <TData = MessagesUnseenListResponse>(
  variables: MessagesUnseenListVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      MessagesUnseenListResponse,
      MessagesUnseenListError,
      TData
    >,
    'queryKey' | 'queryFn' | 'initialData'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGeneratedApiContext(options)
  return reactQuery.useQuery<
    MessagesUnseenListResponse,
    MessagesUnseenListError,
    TData
  >({
    queryKey: queryKeyFn({
      path: '/api/messages/unseen/',
      operationId: 'messagesUnseenList',
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchMessagesUnseenList({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type NotesListError = Fetcher.ErrorWrapper<undefined>

export type NotesListResponse = Schemas.Note[]

export type NotesListVariables = GeneratedApiContext['fetcherOptions']

export const fetchNotesList = (
  variables: NotesListVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<NotesListResponse, NotesListError, undefined, {}, {}, {}>({
    url: '/api/notes/',
    method: 'get',
    ...variables,
    signal,
  })

export const useNotesList = <TData = NotesListResponse>(
  variables: NotesListVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<NotesListResponse, NotesListError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGeneratedApiContext(options)
  return reactQuery.useQuery<NotesListResponse, NotesListError, TData>({
    queryKey: queryKeyFn({
      path: '/api/notes/',
      operationId: 'notesList',
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchNotesList({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type NotesCreateError = Fetcher.ErrorWrapper<undefined>

export type NotesCreateVariables = {
  body: Schemas.NoteRequest
} & GeneratedApiContext['fetcherOptions']

export const fetchNotesCreate = (
  variables: NotesCreateVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<
    Schemas.Note,
    NotesCreateError,
    Schemas.NoteRequest,
    {},
    {},
    {}
  >({ url: '/api/notes/', method: 'post', ...variables, signal })

export const useNotesCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Note,
      NotesCreateError,
      NotesCreateVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = useGeneratedApiContext()
  return reactQuery.useMutation<
    Schemas.Note,
    NotesCreateError,
    NotesCreateVariables
  >({
    mutationFn: (variables: NotesCreateVariables) =>
      fetchNotesCreate({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type NotesRetrievePathParams = {
  id: number
}

export type NotesRetrieveError = Fetcher.ErrorWrapper<undefined>

export type NotesRetrieveVariables = {
  pathParams: NotesRetrievePathParams
} & GeneratedApiContext['fetcherOptions']

export const fetchNotesRetrieve = (
  variables: NotesRetrieveVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<
    Schemas.Note,
    NotesRetrieveError,
    undefined,
    {},
    {},
    NotesRetrievePathParams
  >({ url: '/api/notes/{id}/', method: 'get', ...variables, signal })

export const useNotesRetrieve = <TData = Schemas.Note>(
  variables: NotesRetrieveVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.Note, NotesRetrieveError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGeneratedApiContext(options)
  return reactQuery.useQuery<Schemas.Note, NotesRetrieveError, TData>({
    queryKey: queryKeyFn({
      path: '/api/notes/{id}/',
      operationId: 'notesRetrieve',
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchNotesRetrieve({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type NotesUpdatePathParams = {
  id: number
}

export type NotesUpdateError = Fetcher.ErrorWrapper<undefined>

export type NotesUpdateVariables = {
  body: Schemas.NoteRequest
  pathParams: NotesUpdatePathParams
} & GeneratedApiContext['fetcherOptions']

export const fetchNotesUpdate = (
  variables: NotesUpdateVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<
    Schemas.Note,
    NotesUpdateError,
    Schemas.NoteRequest,
    {},
    {},
    NotesUpdatePathParams
  >({ url: '/api/notes/{id}/', method: 'put', ...variables, signal })

export const useNotesUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Note,
      NotesUpdateError,
      NotesUpdateVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = useGeneratedApiContext()
  return reactQuery.useMutation<
    Schemas.Note,
    NotesUpdateError,
    NotesUpdateVariables
  >({
    mutationFn: (variables: NotesUpdateVariables) =>
      fetchNotesUpdate({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type NotesPartialUpdatePathParams = {
  id: number
}

export type NotesPartialUpdateError = Fetcher.ErrorWrapper<undefined>

export type NotesPartialUpdateVariables = {
  body?: Schemas.PatchedNoteRequest
  pathParams: NotesPartialUpdatePathParams
} & GeneratedApiContext['fetcherOptions']

export const fetchNotesPartialUpdate = (
  variables: NotesPartialUpdateVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<
    Schemas.Note,
    NotesPartialUpdateError,
    Schemas.PatchedNoteRequest,
    {},
    {},
    NotesPartialUpdatePathParams
  >({ url: '/api/notes/{id}/', method: 'patch', ...variables, signal })

export const useNotesPartialUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Note,
      NotesPartialUpdateError,
      NotesPartialUpdateVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = useGeneratedApiContext()
  return reactQuery.useMutation<
    Schemas.Note,
    NotesPartialUpdateError,
    NotesPartialUpdateVariables
  >({
    mutationFn: (variables: NotesPartialUpdateVariables) =>
      fetchNotesPartialUpdate({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type NotesDeleteDestroyPathParams = {
  id: number
}

export type NotesDeleteDestroyError = Fetcher.ErrorWrapper<undefined>

export type NotesDeleteDestroyVariables = {
  pathParams: NotesDeleteDestroyPathParams
} & GeneratedApiContext['fetcherOptions']

export const fetchNotesDeleteDestroy = (
  variables: NotesDeleteDestroyVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<
    undefined,
    NotesDeleteDestroyError,
    undefined,
    {},
    {},
    NotesDeleteDestroyPathParams
  >({ url: '/api/notes/{id}/delete/', method: 'delete', ...variables, signal })

export const useNotesDeleteDestroy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      NotesDeleteDestroyError,
      NotesDeleteDestroyVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = useGeneratedApiContext()
  return reactQuery.useMutation<
    undefined,
    NotesDeleteDestroyError,
    NotesDeleteDestroyVariables
  >({
    mutationFn: (variables: NotesDeleteDestroyVariables) =>
      fetchNotesDeleteDestroy({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type NotificationsGetAllError = Fetcher.ErrorWrapper<undefined>

export type NotificationsGetAllResponse = Schemas.Notification[]

export type NotificationsGetAllVariables = GeneratedApiContext['fetcherOptions']

/**
 * Lists all notifications for the current user
 */
export const fetchNotificationsGetAll = (
  variables: NotificationsGetAllVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<
    NotificationsGetAllResponse,
    NotificationsGetAllError,
    undefined,
    {},
    {},
    {}
  >({ url: '/api/notifications', method: 'get', ...variables, signal })

/**
 * Lists all notifications for the current user
 */
export const useNotificationsGetAll = <TData = NotificationsGetAllResponse>(
  variables: NotificationsGetAllVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      NotificationsGetAllResponse,
      NotificationsGetAllError,
      TData
    >,
    'queryKey' | 'queryFn' | 'initialData'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGeneratedApiContext(options)
  return reactQuery.useQuery<
    NotificationsGetAllResponse,
    NotificationsGetAllError,
    TData
  >({
    queryKey: queryKeyFn({
      path: '/api/notifications',
      operationId: 'notificationsGetAll',
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchNotificationsGetAll({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type NotificationsMarkAsSeenError = Fetcher.ErrorWrapper<
  | {
      status: 403
      payload: Schemas.Exception
    }
  | {
      status: Exclude<ClientErrorStatus | ServerErrorStatus, 200 | 403>
      payload: Schemas.Exception
    }
>

export type NotificationsMarkAsSeenVariables =
  GeneratedApiContext['fetcherOptions']

/**
 * Marks all unseen notifications as seen for logged in user
 */
export const fetchNotificationsMarkAsSeen = (
  variables: NotificationsMarkAsSeenVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<
    undefined,
    NotificationsMarkAsSeenError,
    undefined,
    {},
    {},
    {}
  >({
    url: '/api/notifications/mark-as-seen',
    method: 'get',
    ...variables,
    signal,
  })

/**
 * Marks all unseen notifications as seen for logged in user
 */
export const useNotificationsMarkAsSeen = <TData = undefined>(
  variables: NotificationsMarkAsSeenVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, NotificationsMarkAsSeenError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGeneratedApiContext(options)
  return reactQuery.useQuery<undefined, NotificationsMarkAsSeenError, TData>({
    queryKey: queryKeyFn({
      path: '/api/notifications/mark-as-seen',
      operationId: 'notificationsMarkAsSeen',
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchNotificationsMarkAsSeen({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type NotificationsGetUnseenError = Fetcher.ErrorWrapper<undefined>

export type NotificationsGetUnseenResponse = Schemas.Notification[]

export type NotificationsGetUnseenVariables =
  GeneratedApiContext['fetcherOptions']

/**
 * Lists all NOT SEEN notifications for the current user
 */
export const fetchNotificationsGetUnseen = (
  variables: NotificationsGetUnseenVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<
    NotificationsGetUnseenResponse,
    NotificationsGetUnseenError,
    undefined,
    {},
    {},
    {}
  >({ url: '/api/notifications/unseen', method: 'get', ...variables, signal })

/**
 * Lists all NOT SEEN notifications for the current user
 */
export const useNotificationsGetUnseen = <
  TData = NotificationsGetUnseenResponse
>(
  variables: NotificationsGetUnseenVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      NotificationsGetUnseenResponse,
      NotificationsGetUnseenError,
      TData
    >,
    'queryKey' | 'queryFn' | 'initialData'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGeneratedApiContext(options)
  return reactQuery.useQuery<
    NotificationsGetUnseenResponse,
    NotificationsGetUnseenError,
    TData
  >({
    queryKey: queryKeyFn({
      path: '/api/notifications/unseen',
      operationId: 'notificationsGetUnseen',
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchNotificationsGetUnseen({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type PostsListError = Fetcher.ErrorWrapper<undefined>

export type PostsListResponse = Schemas.Post[]

export type PostsListVariables = GeneratedApiContext['fetcherOptions']

export const fetchPostsList = (
  variables: PostsListVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<PostsListResponse, PostsListError, undefined, {}, {}, {}>({
    url: '/api/posts/',
    method: 'get',
    ...variables,
    signal,
  })

export const usePostsList = <TData = PostsListResponse>(
  variables: PostsListVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<PostsListResponse, PostsListError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGeneratedApiContext(options)
  return reactQuery.useQuery<PostsListResponse, PostsListError, TData>({
    queryKey: queryKeyFn({
      path: '/api/posts/',
      operationId: 'postsList',
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchPostsList({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type PostsCreateCreateError = Fetcher.ErrorWrapper<undefined>

export type PostsCreateCreateVariables = {
  body: Schemas.PostCreateRequest
} & GeneratedApiContext['fetcherOptions']

export const fetchPostsCreateCreate = (
  variables: PostsCreateCreateVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<
    Schemas.PostCreate,
    PostsCreateCreateError,
    Schemas.PostCreateRequest,
    {},
    {},
    {}
  >({ url: '/api/posts/create/', method: 'post', ...variables, signal })

export const usePostsCreateCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.PostCreate,
      PostsCreateCreateError,
      PostsCreateCreateVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = useGeneratedApiContext()
  return reactQuery.useMutation<
    Schemas.PostCreate,
    PostsCreateCreateError,
    PostsCreateCreateVariables
  >({
    mutationFn: (variables: PostsCreateCreateVariables) =>
      fetchPostsCreateCreate({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type PostsDeleteDestroyPathParams = {
  id: number
}

export type PostsDeleteDestroyError = Fetcher.ErrorWrapper<undefined>

export type PostsDeleteDestroyVariables = {
  pathParams: PostsDeleteDestroyPathParams
} & GeneratedApiContext['fetcherOptions']

export const fetchPostsDeleteDestroy = (
  variables: PostsDeleteDestroyVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<
    undefined,
    PostsDeleteDestroyError,
    undefined,
    {},
    {},
    PostsDeleteDestroyPathParams
  >({ url: '/api/posts/delete/{id}/', method: 'delete', ...variables, signal })

export const usePostsDeleteDestroy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      PostsDeleteDestroyError,
      PostsDeleteDestroyVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = useGeneratedApiContext()
  return reactQuery.useMutation<
    undefined,
    PostsDeleteDestroyError,
    PostsDeleteDestroyVariables
  >({
    mutationFn: (variables: PostsDeleteDestroyVariables) =>
      fetchPostsDeleteDestroy({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type SchemaRetrieveQueryParams = {
  format?: 'json' | 'yaml'
  lang?:
    | 'af'
    | 'ar'
    | 'ar-dz'
    | 'ast'
    | 'az'
    | 'be'
    | 'bg'
    | 'bn'
    | 'br'
    | 'bs'
    | 'ca'
    | 'ckb'
    | 'cs'
    | 'cy'
    | 'da'
    | 'de'
    | 'dsb'
    | 'el'
    | 'en'
    | 'en-au'
    | 'en-gb'
    | 'eo'
    | 'es'
    | 'es-ar'
    | 'es-co'
    | 'es-mx'
    | 'es-ni'
    | 'es-ve'
    | 'et'
    | 'eu'
    | 'fa'
    | 'fi'
    | 'fr'
    | 'fy'
    | 'ga'
    | 'gd'
    | 'gl'
    | 'he'
    | 'hi'
    | 'hr'
    | 'hsb'
    | 'hu'
    | 'hy'
    | 'ia'
    | 'id'
    | 'ig'
    | 'io'
    | 'is'
    | 'it'
    | 'ja'
    | 'ka'
    | 'kab'
    | 'kk'
    | 'km'
    | 'kn'
    | 'ko'
    | 'ky'
    | 'lb'
    | 'lt'
    | 'lv'
    | 'mk'
    | 'ml'
    | 'mn'
    | 'mr'
    | 'ms'
    | 'my'
    | 'nb'
    | 'ne'
    | 'nl'
    | 'nn'
    | 'os'
    | 'pa'
    | 'pl'
    | 'pt'
    | 'pt-br'
    | 'ro'
    | 'ru'
    | 'sk'
    | 'sl'
    | 'sq'
    | 'sr'
    | 'sr-latn'
    | 'sv'
    | 'sw'
    | 'ta'
    | 'te'
    | 'tg'
    | 'th'
    | 'tk'
    | 'tr'
    | 'tt'
    | 'udm'
    | 'uk'
    | 'ur'
    | 'uz'
    | 'vi'
    | 'zh-hans'
    | 'zh-hant'
}

export type SchemaRetrieveError = Fetcher.ErrorWrapper<undefined>

export type SchemaRetrieveResponse = {
  [key: string]: any
}

export type SchemaRetrieveVariables = {
  queryParams?: SchemaRetrieveQueryParams
} & GeneratedApiContext['fetcherOptions']

/**
 * OpenApi3 schema for this API. Format can be selected via content negotiation.
 *
 * - YAML: application/vnd.oai.openapi
 * - JSON: application/vnd.oai.openapi+json
 */
export const fetchSchemaRetrieve = (
  variables: SchemaRetrieveVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<
    SchemaRetrieveResponse,
    SchemaRetrieveError,
    undefined,
    {},
    SchemaRetrieveQueryParams,
    {}
  >({ url: '/api/schema/', method: 'get', ...variables, signal })

/**
 * OpenApi3 schema for this API. Format can be selected via content negotiation.
 *
 * - YAML: application/vnd.oai.openapi
 * - JSON: application/vnd.oai.openapi+json
 */
export const useSchemaRetrieve = <TData = SchemaRetrieveResponse>(
  variables: SchemaRetrieveVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      SchemaRetrieveResponse,
      SchemaRetrieveError,
      TData
    >,
    'queryKey' | 'queryFn' | 'initialData'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGeneratedApiContext(options)
  return reactQuery.useQuery<
    SchemaRetrieveResponse,
    SchemaRetrieveError,
    TData
  >({
    queryKey: queryKeyFn({
      path: '/api/schema/',
      operationId: 'schemaRetrieve',
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchSchemaRetrieve({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type TasksListError = Fetcher.ErrorWrapper<undefined>

export type TasksListResponse = Schemas.Task[]

export type TasksListVariables = GeneratedApiContext['fetcherOptions']

export const fetchTasksList = (
  variables: TasksListVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<TasksListResponse, TasksListError, undefined, {}, {}, {}>({
    url: '/api/tasks/',
    method: 'get',
    ...variables,
    signal,
  })

export const useTasksList = <TData = TasksListResponse>(
  variables: TasksListVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<TasksListResponse, TasksListError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGeneratedApiContext(options)
  return reactQuery.useQuery<TasksListResponse, TasksListError, TData>({
    queryKey: queryKeyFn({
      path: '/api/tasks/',
      operationId: 'tasksList',
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchTasksList({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type TasksCreateError = Fetcher.ErrorWrapper<undefined>

export type TasksCreateVariables = {
  body: Schemas.TaskRequest
} & GeneratedApiContext['fetcherOptions']

export const fetchTasksCreate = (
  variables: TasksCreateVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<
    Schemas.Task,
    TasksCreateError,
    Schemas.TaskRequest,
    {},
    {},
    {}
  >({ url: '/api/tasks/', method: 'post', ...variables, signal })

export const useTasksCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Task,
      TasksCreateError,
      TasksCreateVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = useGeneratedApiContext()
  return reactQuery.useMutation<
    Schemas.Task,
    TasksCreateError,
    TasksCreateVariables
  >({
    mutationFn: (variables: TasksCreateVariables) =>
      fetchTasksCreate({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type TasksRetrievePathParams = {
  id: number
}

export type TasksRetrieveError = Fetcher.ErrorWrapper<undefined>

export type TasksRetrieveVariables = {
  pathParams: TasksRetrievePathParams
} & GeneratedApiContext['fetcherOptions']

export const fetchTasksRetrieve = (
  variables: TasksRetrieveVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<
    Schemas.Task,
    TasksRetrieveError,
    undefined,
    {},
    {},
    TasksRetrievePathParams
  >({ url: '/api/tasks/{id}/', method: 'get', ...variables, signal })

export const useTasksRetrieve = <TData = Schemas.Task>(
  variables: TasksRetrieveVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.Task, TasksRetrieveError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGeneratedApiContext(options)
  return reactQuery.useQuery<Schemas.Task, TasksRetrieveError, TData>({
    queryKey: queryKeyFn({
      path: '/api/tasks/{id}/',
      operationId: 'tasksRetrieve',
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchTasksRetrieve({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type TasksUpdatePathParams = {
  id: number
}

export type TasksUpdateError = Fetcher.ErrorWrapper<undefined>

export type TasksUpdateVariables = {
  body: Schemas.TaskRequest
  pathParams: TasksUpdatePathParams
} & GeneratedApiContext['fetcherOptions']

export const fetchTasksUpdate = (
  variables: TasksUpdateVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<
    Schemas.Task,
    TasksUpdateError,
    Schemas.TaskRequest,
    {},
    {},
    TasksUpdatePathParams
  >({ url: '/api/tasks/{id}/', method: 'put', ...variables, signal })

export const useTasksUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Task,
      TasksUpdateError,
      TasksUpdateVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = useGeneratedApiContext()
  return reactQuery.useMutation<
    Schemas.Task,
    TasksUpdateError,
    TasksUpdateVariables
  >({
    mutationFn: (variables: TasksUpdateVariables) =>
      fetchTasksUpdate({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type TasksPartialUpdatePathParams = {
  id: number
}

export type TasksPartialUpdateError = Fetcher.ErrorWrapper<undefined>

export type TasksPartialUpdateVariables = {
  body?: Schemas.PatchedTaskRequest
  pathParams: TasksPartialUpdatePathParams
} & GeneratedApiContext['fetcherOptions']

export const fetchTasksPartialUpdate = (
  variables: TasksPartialUpdateVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<
    Schemas.Task,
    TasksPartialUpdateError,
    Schemas.PatchedTaskRequest,
    {},
    {},
    TasksPartialUpdatePathParams
  >({ url: '/api/tasks/{id}/', method: 'patch', ...variables, signal })

export const useTasksPartialUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Task,
      TasksPartialUpdateError,
      TasksPartialUpdateVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = useGeneratedApiContext()
  return reactQuery.useMutation<
    Schemas.Task,
    TasksPartialUpdateError,
    TasksPartialUpdateVariables
  >({
    mutationFn: (variables: TasksPartialUpdateVariables) =>
      fetchTasksPartialUpdate({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type TasksDeleteDestroyPathParams = {
  id: number
}

export type TasksDeleteDestroyError = Fetcher.ErrorWrapper<undefined>

export type TasksDeleteDestroyVariables = {
  pathParams: TasksDeleteDestroyPathParams
} & GeneratedApiContext['fetcherOptions']

export const fetchTasksDeleteDestroy = (
  variables: TasksDeleteDestroyVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<
    undefined,
    TasksDeleteDestroyError,
    undefined,
    {},
    {},
    TasksDeleteDestroyPathParams
  >({ url: '/api/tasks/{id}/delete', method: 'delete', ...variables, signal })

export const useTasksDeleteDestroy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      TasksDeleteDestroyError,
      TasksDeleteDestroyVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = useGeneratedApiContext()
  return reactQuery.useMutation<
    undefined,
    TasksDeleteDestroyError,
    TasksDeleteDestroyVariables
  >({
    mutationFn: (variables: TasksDeleteDestroyVariables) =>
      fetchTasksDeleteDestroy({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type TasksAssignedListError = Fetcher.ErrorWrapper<undefined>

export type TasksAssignedListResponse = Schemas.Task[]

export type TasksAssignedListVariables = GeneratedApiContext['fetcherOptions']

export const fetchTasksAssignedList = (
  variables: TasksAssignedListVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<
    TasksAssignedListResponse,
    TasksAssignedListError,
    undefined,
    {},
    {},
    {}
  >({ url: '/api/tasks/assigned/', method: 'get', ...variables, signal })

export const useTasksAssignedList = <TData = TasksAssignedListResponse>(
  variables: TasksAssignedListVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      TasksAssignedListResponse,
      TasksAssignedListError,
      TData
    >,
    'queryKey' | 'queryFn' | 'initialData'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGeneratedApiContext(options)
  return reactQuery.useQuery<
    TasksAssignedListResponse,
    TasksAssignedListError,
    TData
  >({
    queryKey: queryKeyFn({
      path: '/api/tasks/assigned/',
      operationId: 'tasksAssignedList',
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchTasksAssignedList({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type UserRetrievePathParams = {
  id: number
}

export type UserRetrieveError = Fetcher.ErrorWrapper<undefined>

export type UserRetrieveVariables = {
  pathParams: UserRetrievePathParams
} & GeneratedApiContext['fetcherOptions']

export const fetchUserRetrieve = (
  variables: UserRetrieveVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<
    Schemas.User,
    UserRetrieveError,
    undefined,
    {},
    {},
    UserRetrievePathParams
  >({ url: '/api/user/{id}', method: 'get', ...variables, signal })

export const useUserRetrieve = <TData = Schemas.User>(
  variables: UserRetrieveVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.User, UserRetrieveError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGeneratedApiContext(options)
  return reactQuery.useQuery<Schemas.User, UserRetrieveError, TData>({
    queryKey: queryKeyFn({
      path: '/api/user/{id}',
      operationId: 'userRetrieve',
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchUserRetrieve({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type UserProfileRetrievePathParams = {
  userId: number
}

export type UserProfileRetrieveError = Fetcher.ErrorWrapper<undefined>

export type UserProfileRetrieveVariables = {
  pathParams: UserProfileRetrievePathParams
} & GeneratedApiContext['fetcherOptions']

export const fetchUserProfileRetrieve = (
  variables: UserProfileRetrieveVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<
    Schemas.Profile,
    UserProfileRetrieveError,
    undefined,
    {},
    {},
    UserProfileRetrievePathParams
  >({ url: '/api/user/{userId}/profile', method: 'get', ...variables, signal })

export const useUserProfileRetrieve = <TData = Schemas.Profile>(
  variables: UserProfileRetrieveVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Profile,
      UserProfileRetrieveError,
      TData
    >,
    'queryKey' | 'queryFn' | 'initialData'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGeneratedApiContext(options)
  return reactQuery.useQuery<Schemas.Profile, UserProfileRetrieveError, TData>({
    queryKey: queryKeyFn({
      path: '/api/user/{userId}/profile',
      operationId: 'userProfileRetrieve',
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchUserProfileRetrieve({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type UserProfileUpdatePathParams = {
  userId: number
}

export type UserProfileUpdateError = Fetcher.ErrorWrapper<undefined>

export type UserProfileUpdateVariables = {
  body: Schemas.ProfileRequest
  pathParams: UserProfileUpdatePathParams
} & GeneratedApiContext['fetcherOptions']

export const fetchUserProfileUpdate = (
  variables: UserProfileUpdateVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<
    Schemas.Profile,
    UserProfileUpdateError,
    Schemas.ProfileRequest,
    {},
    {},
    UserProfileUpdatePathParams
  >({ url: '/api/user/{userId}/profile', method: 'put', ...variables, signal })

export const useUserProfileUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Profile,
      UserProfileUpdateError,
      UserProfileUpdateVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = useGeneratedApiContext()
  return reactQuery.useMutation<
    Schemas.Profile,
    UserProfileUpdateError,
    UserProfileUpdateVariables
  >({
    mutationFn: (variables: UserProfileUpdateVariables) =>
      fetchUserProfileUpdate({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type UserProfilePartialUpdatePathParams = {
  userId: number
}

export type UserProfilePartialUpdateError = Fetcher.ErrorWrapper<undefined>

export type UserProfilePartialUpdateVariables = {
  body?: Schemas.PatchedProfileRequest
  pathParams: UserProfilePartialUpdatePathParams
} & GeneratedApiContext['fetcherOptions']

export const fetchUserProfilePartialUpdate = (
  variables: UserProfilePartialUpdateVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<
    Schemas.Profile,
    UserProfilePartialUpdateError,
    Schemas.PatchedProfileRequest,
    {},
    {},
    UserProfilePartialUpdatePathParams
  >({
    url: '/api/user/{userId}/profile',
    method: 'patch',
    ...variables,
    signal,
  })

export const useUserProfilePartialUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Profile,
      UserProfilePartialUpdateError,
      UserProfilePartialUpdateVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = useGeneratedApiContext()
  return reactQuery.useMutation<
    Schemas.Profile,
    UserProfilePartialUpdateError,
    UserProfilePartialUpdateVariables
  >({
    mutationFn: (variables: UserProfilePartialUpdateVariables) =>
      fetchUserProfilePartialUpdate({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type UserProfileAvatarUpdatePathParams = {
  userId: number
}

export type UserProfileAvatarUpdateError = Fetcher.ErrorWrapper<undefined>

export type UserProfileAvatarUpdateVariables = {
  body?: Schemas.ProfileAvatarRequest
  pathParams: UserProfileAvatarUpdatePathParams
} & GeneratedApiContext['fetcherOptions']

export const fetchUserProfileAvatarUpdate = (
  variables: UserProfileAvatarUpdateVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<
    Schemas.ProfileAvatar,
    UserProfileAvatarUpdateError,
    Schemas.ProfileAvatarRequest,
    {},
    {},
    UserProfileAvatarUpdatePathParams
  >({
    url: '/api/user/{userId}/profile/avatar',
    method: 'put',
    ...variables,
    signal,
  })

export const useUserProfileAvatarUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ProfileAvatar,
      UserProfileAvatarUpdateError,
      UserProfileAvatarUpdateVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = useGeneratedApiContext()
  return reactQuery.useMutation<
    Schemas.ProfileAvatar,
    UserProfileAvatarUpdateError,
    UserProfileAvatarUpdateVariables
  >({
    mutationFn: (variables: UserProfileAvatarUpdateVariables) =>
      fetchUserProfileAvatarUpdate({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type UserProfileAvatarPartialUpdatePathParams = {
  userId: number
}

export type UserProfileAvatarPartialUpdateError =
  Fetcher.ErrorWrapper<undefined>

export type UserProfileAvatarPartialUpdateVariables = {
  body?: Schemas.PatchedProfileAvatarRequest
  pathParams: UserProfileAvatarPartialUpdatePathParams
} & GeneratedApiContext['fetcherOptions']

export const fetchUserProfileAvatarPartialUpdate = (
  variables: UserProfileAvatarPartialUpdateVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<
    Schemas.ProfileAvatar,
    UserProfileAvatarPartialUpdateError,
    Schemas.PatchedProfileAvatarRequest,
    {},
    {},
    UserProfileAvatarPartialUpdatePathParams
  >({
    url: '/api/user/{userId}/profile/avatar',
    method: 'patch',
    ...variables,
    signal,
  })

export const useUserProfileAvatarPartialUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ProfileAvatar,
      UserProfileAvatarPartialUpdateError,
      UserProfileAvatarPartialUpdateVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = useGeneratedApiContext()
  return reactQuery.useMutation<
    Schemas.ProfileAvatar,
    UserProfileAvatarPartialUpdateError,
    UserProfileAvatarPartialUpdateVariables
  >({
    mutationFn: (variables: UserProfileAvatarPartialUpdateVariables) =>
      fetchUserProfileAvatarPartialUpdate({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type UserCurrentRetrieveError = Fetcher.ErrorWrapper<undefined>

export type UserCurrentRetrieveVariables = GeneratedApiContext['fetcherOptions']

export const fetchUserCurrentRetrieve = (
  variables: UserCurrentRetrieveVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<
    Schemas.User,
    UserCurrentRetrieveError,
    undefined,
    {},
    {},
    {}
  >({ url: '/api/user/current', method: 'get', ...variables, signal })

export const useUserCurrentRetrieve = <TData = Schemas.User>(
  variables: UserCurrentRetrieveVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.User, UserCurrentRetrieveError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGeneratedApiContext(options)
  return reactQuery.useQuery<Schemas.User, UserCurrentRetrieveError, TData>({
    queryKey: queryKeyFn({
      path: '/api/user/current',
      operationId: 'userCurrentRetrieve',
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchUserCurrentRetrieve({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type UserLoginCreateError = Fetcher.ErrorWrapper<
  | {
      status: 401
      payload: Schemas.Exception
    }
  | {
      status: Exclude<ClientErrorStatus | ServerErrorStatus, 200 | 401>
      payload: Schemas.Exception
    }
>

export type UserLoginCreateVariables = {
  body: Schemas.LoginRequestRequest
} & GeneratedApiContext['fetcherOptions']

/**
 * Provides user login
 */
export const fetchUserLoginCreate = (
  variables: UserLoginCreateVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<
    Schemas.User,
    UserLoginCreateError,
    Schemas.LoginRequestRequest,
    {},
    {},
    {}
  >({ url: '/api/user/login', method: 'post', ...variables, signal })

/**
 * Provides user login
 */
export const useUserLoginCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.User,
      UserLoginCreateError,
      UserLoginCreateVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = useGeneratedApiContext()
  return reactQuery.useMutation<
    Schemas.User,
    UserLoginCreateError,
    UserLoginCreateVariables
  >({
    mutationFn: (variables: UserLoginCreateVariables) =>
      fetchUserLoginCreate({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type UserLogoutCreateError = Fetcher.ErrorWrapper<{
  status: Exclude<ClientErrorStatus | ServerErrorStatus, 200>
  payload: Schemas.Exception
}>

export type UserLogoutCreateVariables = GeneratedApiContext['fetcherOptions']

/**
 * Logouts user from the system
 */
export const fetchUserLogoutCreate = (
  variables: UserLogoutCreateVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<undefined, UserLogoutCreateError, undefined, {}, {}, {}>({
    url: '/api/user/logout',
    method: 'post',
    ...variables,
    signal,
  })

/**
 * Logouts user from the system
 */
export const useUserLogoutCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      UserLogoutCreateError,
      UserLogoutCreateVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = useGeneratedApiContext()
  return reactQuery.useMutation<
    undefined,
    UserLogoutCreateError,
    UserLogoutCreateVariables
  >({
    mutationFn: (variables: UserLogoutCreateVariables) =>
      fetchUserLogoutCreate({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type RegisterUserError = Fetcher.ErrorWrapper<
  | {
      status: 400
      payload: {
        [key: string]: string
      }
    }
  | {
      status: Exclude<ClientErrorStatus | ServerErrorStatus, 201 | 400>
      payload: Schemas.Exception
    }
>

export type RegisterUserVariables = {
  body: Schemas.UserRegisterRequest
} & GeneratedApiContext['fetcherOptions']

/**
 * Endpoint for user registration
 *
 * Creates both User and related Profile models
 */
export const fetchRegisterUser = (
  variables: RegisterUserVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<
    undefined,
    RegisterUserError,
    Schemas.UserRegisterRequest,
    {},
    {},
    {}
  >({ url: '/api/user/register', method: 'post', ...variables, signal })

/**
 * Endpoint for user registration
 *
 * Creates both User and related Profile models
 */
export const useRegisterUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      RegisterUserError,
      RegisterUserVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = useGeneratedApiContext()
  return reactQuery.useMutation<
    undefined,
    RegisterUserError,
    RegisterUserVariables
  >({
    mutationFn: (variables: RegisterUserVariables) =>
      fetchRegisterUser({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type UserSearchListError = Fetcher.ErrorWrapper<undefined>

export type UserSearchListResponse = Schemas.User[]

export type UserSearchListVariables = GeneratedApiContext['fetcherOptions']

export const fetchUserSearchList = (
  variables: UserSearchListVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<
    UserSearchListResponse,
    UserSearchListError,
    undefined,
    {},
    {},
    {}
  >({ url: '/api/user/search', method: 'get', ...variables, signal })

export const useUserSearchList = <TData = UserSearchListResponse>(
  variables: UserSearchListVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      UserSearchListResponse,
      UserSearchListError,
      TData
    >,
    'queryKey' | 'queryFn' | 'initialData'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGeneratedApiContext(options)
  return reactQuery.useQuery<
    UserSearchListResponse,
    UserSearchListError,
    TData
  >({
    queryKey: queryKeyFn({
      path: '/api/user/search',
      operationId: 'userSearchList',
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchUserSearchList({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type UserSearchList2PathParams = {
  competencyIds: string
}

export type UserSearchList2Error = Fetcher.ErrorWrapper<undefined>

export type UserSearchList2Response = Schemas.User[]

export type UserSearchList2Variables = {
  pathParams: UserSearchList2PathParams
} & GeneratedApiContext['fetcherOptions']

export const fetchUserSearchList2 = (
  variables: UserSearchList2Variables,
  signal?: AbortSignal
) =>
  generatedApiFetch<
    UserSearchList2Response,
    UserSearchList2Error,
    undefined,
    {},
    {},
    UserSearchList2PathParams
  >({
    url: '/api/user/search/{competencyIds}/',
    method: 'get',
    ...variables,
    signal,
  })

export const useUserSearchList2 = <TData = UserSearchList2Response>(
  variables: UserSearchList2Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      UserSearchList2Response,
      UserSearchList2Error,
      TData
    >,
    'queryKey' | 'queryFn' | 'initialData'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGeneratedApiContext(options)
  return reactQuery.useQuery<
    UserSearchList2Response,
    UserSearchList2Error,
    TData
  >({
    queryKey: queryKeyFn({
      path: '/api/user/search/{competencyIds}/',
      operationId: 'userSearchList2',
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchUserSearchList2({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type QueryOperation =
  | {
      path: '/api/competency/all'
      operationId: 'competencyAllList'
      variables: CompetencyAllListVariables
    }
  | {
      path: '/api/connections'
      operationId: 'connectionsList'
      variables: ConnectionsListVariables
    }
  | {
      path: '/api/connections/requests'
      operationId: 'connectionsRequestsList'
      variables: ConnectionsRequestsListVariables
    }
  | {
      path: '/api/meeting/'
      operationId: 'meetingList'
      variables: MeetingListVariables
    }
  | {
      path: '/api/meeting/from-mentors'
      operationId: 'meetingFromMentorsList'
      variables: MeetingFromMentorsListVariables
    }
  | {
      path: '/api/mentoring/{id}/'
      operationId: 'mentoringRetrieve'
      variables: MentoringRetrieveVariables
    }
  | {
      path: '/api/mentoring/as-mentee/'
      operationId: 'mentoringAsMenteeList'
      variables: MentoringAsMenteeListVariables
    }
  | {
      path: '/api/mentoring/as-mentor/'
      operationId: 'mentoringAsMentorList'
      variables: MentoringAsMentorListVariables
    }
  | {
      path: '/api/mentoring/requests/from-user/'
      operationId: 'mentoringRequestsFromUserList'
      variables: MentoringRequestsFromUserListVariables
    }
  | {
      path: '/api/mentoring/requests/to-user/'
      operationId: 'mentoringRequestsToUserList'
      variables: MentoringRequestsToUserListVariables
    }
  | {
      path: '/api/messages/all/'
      operationId: 'messagesAllList'
      variables: MessagesAllListVariables
    }
  | {
      path: '/api/messages/all-users/'
      operationId: 'messagesAllUsersList'
      variables: MessagesAllUsersListVariables
    }
  | {
      path: '/api/messages/unseen/'
      operationId: 'messagesUnseenList'
      variables: MessagesUnseenListVariables
    }
  | {
      path: '/api/notes/'
      operationId: 'notesList'
      variables: NotesListVariables
    }
  | {
      path: '/api/notes/{id}/'
      operationId: 'notesRetrieve'
      variables: NotesRetrieveVariables
    }
  | {
      path: '/api/notifications'
      operationId: 'notificationsGetAll'
      variables: NotificationsGetAllVariables
    }
  | {
      path: '/api/notifications/mark-as-seen'
      operationId: 'notificationsMarkAsSeen'
      variables: NotificationsMarkAsSeenVariables
    }
  | {
      path: '/api/notifications/unseen'
      operationId: 'notificationsGetUnseen'
      variables: NotificationsGetUnseenVariables
    }
  | {
      path: '/api/posts/'
      operationId: 'postsList'
      variables: PostsListVariables
    }
  | {
      path: '/api/schema/'
      operationId: 'schemaRetrieve'
      variables: SchemaRetrieveVariables
    }
  | {
      path: '/api/tasks/'
      operationId: 'tasksList'
      variables: TasksListVariables
    }
  | {
      path: '/api/tasks/{id}/'
      operationId: 'tasksRetrieve'
      variables: TasksRetrieveVariables
    }
  | {
      path: '/api/tasks/assigned/'
      operationId: 'tasksAssignedList'
      variables: TasksAssignedListVariables
    }
  | {
      path: '/api/user/{id}'
      operationId: 'userRetrieve'
      variables: UserRetrieveVariables
    }
  | {
      path: '/api/user/{userId}/profile'
      operationId: 'userProfileRetrieve'
      variables: UserProfileRetrieveVariables
    }
  | {
      path: '/api/user/current'
      operationId: 'userCurrentRetrieve'
      variables: UserCurrentRetrieveVariables
    }
  | {
      path: '/api/user/search'
      operationId: 'userSearchList'
      variables: UserSearchListVariables
    }
  | {
      path: '/api/user/search/{competencyIds}/'
      operationId: 'userSearchList2'
      variables: UserSearchList2Variables
    }
