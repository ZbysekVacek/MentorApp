/**
 * Generated by @openapi-codegen
 *
 * @version 1.0.0
 */
import * as reactQuery from '@tanstack/react-query'
import {
  useGeneratedApiContext,
  GeneratedApiContext,
} from './generatedApiContext'
import type * as Fetcher from './generatedApiFetcher'
import { generatedApiFetch } from './generatedApiFetcher'
import type * as Schemas from './generatedApiSchemas'

export type ListMeetingsError = Fetcher.ErrorWrapper<undefined>

export type ListMeetingsResponse = Schemas.Meeting[]

export type ListMeetingsVariables = GeneratedApiContext['fetcherOptions']

export const fetchListMeetings = (
  variables: ListMeetingsVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<
    ListMeetingsResponse,
    ListMeetingsError,
    undefined,
    {},
    {},
    {}
  >({ url: '/api/meetings/', method: 'get', ...variables, signal })

export const useListMeetings = <TData = ListMeetingsResponse>(
  variables: ListMeetingsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<ListMeetingsResponse, ListMeetingsError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGeneratedApiContext(options)
  return reactQuery.useQuery<ListMeetingsResponse, ListMeetingsError, TData>({
    queryKey: queryKeyFn({
      path: '/api/meetings/',
      operationId: 'listMeetings',
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchListMeetings({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type CreateMeetingError = Fetcher.ErrorWrapper<undefined>

export type CreateMeetingVariables = {
  body: Schemas.Meeting
} & GeneratedApiContext['fetcherOptions']

export const fetchCreateMeeting = (
  variables: CreateMeetingVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<
    Schemas.Meeting,
    CreateMeetingError,
    Schemas.Meeting,
    {},
    {},
    {}
  >({ url: '/api/meetings/', method: 'post', ...variables, signal })

export const useCreateMeeting = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Meeting,
      CreateMeetingError,
      CreateMeetingVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = useGeneratedApiContext()
  return reactQuery.useMutation<
    Schemas.Meeting,
    CreateMeetingError,
    CreateMeetingVariables
  >({
    mutationFn: (variables: CreateMeetingVariables) =>
      fetchCreateMeeting({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type RetrieveMeetingPathParams = {
  /**
   * A unique integer value identifying this meeting.
   */
  id: string
}

export type RetrieveMeetingError = Fetcher.ErrorWrapper<undefined>

export type RetrieveMeetingVariables = {
  pathParams: RetrieveMeetingPathParams
} & GeneratedApiContext['fetcherOptions']

export const fetchRetrieveMeeting = (
  variables: RetrieveMeetingVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<
    Schemas.Meeting,
    RetrieveMeetingError,
    undefined,
    {},
    {},
    RetrieveMeetingPathParams
  >({ url: '/api/meetings/{id}', method: 'get', ...variables, signal })

export const useRetrieveMeeting = <TData = Schemas.Meeting>(
  variables: RetrieveMeetingVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.Meeting, RetrieveMeetingError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGeneratedApiContext(options)
  return reactQuery.useQuery<Schemas.Meeting, RetrieveMeetingError, TData>({
    queryKey: queryKeyFn({
      path: '/api/meetings/{id}',
      operationId: 'retrieveMeeting',
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchRetrieveMeeting({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type UpdateMeetingPathParams = {
  /**
   * A unique integer value identifying this meeting.
   */
  id: string
}

export type UpdateMeetingError = Fetcher.ErrorWrapper<undefined>

export type UpdateMeetingVariables = {
  body: Schemas.Meeting
  pathParams: UpdateMeetingPathParams
} & GeneratedApiContext['fetcherOptions']

export const fetchUpdateMeeting = (
  variables: UpdateMeetingVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<
    Schemas.Meeting,
    UpdateMeetingError,
    Schemas.Meeting,
    {},
    {},
    UpdateMeetingPathParams
  >({ url: '/api/meetings/{id}', method: 'put', ...variables, signal })

export const useUpdateMeeting = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Meeting,
      UpdateMeetingError,
      UpdateMeetingVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = useGeneratedApiContext()
  return reactQuery.useMutation<
    Schemas.Meeting,
    UpdateMeetingError,
    UpdateMeetingVariables
  >({
    mutationFn: (variables: UpdateMeetingVariables) =>
      fetchUpdateMeeting({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type PartialUpdateMeetingPathParams = {
  /**
   * A unique integer value identifying this meeting.
   */
  id: string
}

export type PartialUpdateMeetingError = Fetcher.ErrorWrapper<undefined>

export type PartialUpdateMeetingVariables = {
  body: Schemas.Meeting
  pathParams: PartialUpdateMeetingPathParams
} & GeneratedApiContext['fetcherOptions']

export const fetchPartialUpdateMeeting = (
  variables: PartialUpdateMeetingVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<
    Schemas.Meeting,
    PartialUpdateMeetingError,
    Schemas.Meeting,
    {},
    {},
    PartialUpdateMeetingPathParams
  >({ url: '/api/meetings/{id}', method: 'patch', ...variables, signal })

export const usePartialUpdateMeeting = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Meeting,
      PartialUpdateMeetingError,
      PartialUpdateMeetingVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = useGeneratedApiContext()
  return reactQuery.useMutation<
    Schemas.Meeting,
    PartialUpdateMeetingError,
    PartialUpdateMeetingVariables
  >({
    mutationFn: (variables: PartialUpdateMeetingVariables) =>
      fetchPartialUpdateMeeting({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type DestroyMeetingPathParams = {
  /**
   * A unique integer value identifying this meeting.
   */
  id: string
}

export type DestroyMeetingError = Fetcher.ErrorWrapper<undefined>

export type DestroyMeetingVariables = {
  pathParams: DestroyMeetingPathParams
} & GeneratedApiContext['fetcherOptions']

export const fetchDestroyMeeting = (
  variables: DestroyMeetingVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<
    undefined,
    DestroyMeetingError,
    undefined,
    {},
    {},
    DestroyMeetingPathParams
  >({ url: '/api/meetings/{id}', method: 'delete', ...variables, signal })

export const useDestroyMeeting = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      DestroyMeetingError,
      DestroyMeetingVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = useGeneratedApiContext()
  return reactQuery.useMutation<
    undefined,
    DestroyMeetingError,
    DestroyMeetingVariables
  >({
    mutationFn: (variables: DestroyMeetingVariables) =>
      fetchDestroyMeeting({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type QueryOperation =
  | {
      path: '/api/meetings/'
      operationId: 'listMeetings'
      variables: ListMeetingsVariables
    }
  | {
      path: '/api/meetings/{id}'
      operationId: 'retrieveMeeting'
      variables: RetrieveMeetingVariables
    }
