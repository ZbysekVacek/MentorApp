/**
 * Generated by @openapi-codegen
 *
 * @version 1.0.0
 */
import * as reactQuery from '@tanstack/react-query'
import {
  useGeneratedApiContext,
  GeneratedApiContext,
} from './generatedApiContext'
import type * as Fetcher from './generatedApiFetcher'
import { generatedApiFetch } from './generatedApiFetcher'
import type * as Schemas from './generatedApiSchemas'
import type { ClientErrorStatus, ServerErrorStatus } from './generatedApiUtils'

export type CompetencyAllListError = Fetcher.ErrorWrapper<undefined>

export type CompetencyAllListResponse = Schemas.Competency[]

export type CompetencyAllListVariables = GeneratedApiContext['fetcherOptions']

export const fetchCompetencyAllList = (
  variables: CompetencyAllListVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<
    CompetencyAllListResponse,
    CompetencyAllListError,
    undefined,
    {},
    {},
    {}
  >({ url: '/api/competency/all', method: 'get', ...variables, signal })

export const useCompetencyAllList = <TData = CompetencyAllListResponse>(
  variables: CompetencyAllListVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      CompetencyAllListResponse,
      CompetencyAllListError,
      TData
    >,
    'queryKey' | 'queryFn' | 'initialData'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGeneratedApiContext(options)
  return reactQuery.useQuery<
    CompetencyAllListResponse,
    CompetencyAllListError,
    TData
  >({
    queryKey: queryKeyFn({
      path: '/api/competency/all',
      operationId: 'competencyAllList',
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchCompetencyAllList({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type ConnectionsListError = Fetcher.ErrorWrapper<undefined>

export type ConnectionsListResponse = Schemas.ConnectionListItem[]

export type ConnectionsListVariables = GeneratedApiContext['fetcherOptions']

export const fetchConnectionsList = (
  variables: ConnectionsListVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<
    ConnectionsListResponse,
    ConnectionsListError,
    undefined,
    {},
    {},
    {}
  >({ url: '/api/connections', method: 'get', ...variables, signal })

export const useConnectionsList = <TData = ConnectionsListResponse>(
  variables: ConnectionsListVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ConnectionsListResponse,
      ConnectionsListError,
      TData
    >,
    'queryKey' | 'queryFn' | 'initialData'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGeneratedApiContext(options)
  return reactQuery.useQuery<
    ConnectionsListResponse,
    ConnectionsListError,
    TData
  >({
    queryKey: queryKeyFn({
      path: '/api/connections',
      operationId: 'connectionsList',
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchConnectionsList({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type ConnectionsDeleteDestroyPathParams = {
  id: number
}

export type ConnectionsDeleteDestroyError = Fetcher.ErrorWrapper<undefined>

export type ConnectionsDeleteDestroyVariables = {
  pathParams: ConnectionsDeleteDestroyPathParams
} & GeneratedApiContext['fetcherOptions']

export const fetchConnectionsDeleteDestroy = (
  variables: ConnectionsDeleteDestroyVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<
    undefined,
    ConnectionsDeleteDestroyError,
    undefined,
    {},
    {},
    ConnectionsDeleteDestroyPathParams
  >({
    url: '/api/connections/{id}/delete',
    method: 'delete',
    ...variables,
    signal,
  })

export const useConnectionsDeleteDestroy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ConnectionsDeleteDestroyError,
      ConnectionsDeleteDestroyVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = useGeneratedApiContext()
  return reactQuery.useMutation<
    undefined,
    ConnectionsDeleteDestroyError,
    ConnectionsDeleteDestroyVariables
  >({
    mutationFn: (variables: ConnectionsDeleteDestroyVariables) =>
      fetchConnectionsDeleteDestroy({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type ConnectionsRequestsListError = Fetcher.ErrorWrapper<undefined>

export type ConnectionsRequestsListResponse = Schemas.ConnectionRequest[]

export type ConnectionsRequestsListVariables =
  GeneratedApiContext['fetcherOptions']

export const fetchConnectionsRequestsList = (
  variables: ConnectionsRequestsListVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<
    ConnectionsRequestsListResponse,
    ConnectionsRequestsListError,
    undefined,
    {},
    {},
    {}
  >({ url: '/api/connections/requests', method: 'get', ...variables, signal })

export const useConnectionsRequestsList = <
  TData = ConnectionsRequestsListResponse
>(
  variables: ConnectionsRequestsListVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ConnectionsRequestsListResponse,
      ConnectionsRequestsListError,
      TData
    >,
    'queryKey' | 'queryFn' | 'initialData'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGeneratedApiContext(options)
  return reactQuery.useQuery<
    ConnectionsRequestsListResponse,
    ConnectionsRequestsListError,
    TData
  >({
    queryKey: queryKeyFn({
      path: '/api/connections/requests',
      operationId: 'connectionsRequestsList',
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchConnectionsRequestsList({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type ConnectionsRequestsDestroyPathParams = {
  id: number
}

export type ConnectionsRequestsDestroyError = Fetcher.ErrorWrapper<undefined>

export type ConnectionsRequestsDestroyVariables = {
  pathParams: ConnectionsRequestsDestroyPathParams
} & GeneratedApiContext['fetcherOptions']

export const fetchConnectionsRequestsDestroy = (
  variables: ConnectionsRequestsDestroyVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<
    undefined,
    ConnectionsRequestsDestroyError,
    undefined,
    {},
    {},
    ConnectionsRequestsDestroyPathParams
  >({
    url: '/api/connections/requests/{id}',
    method: 'delete',
    ...variables,
    signal,
  })

export const useConnectionsRequestsDestroy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ConnectionsRequestsDestroyError,
      ConnectionsRequestsDestroyVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = useGeneratedApiContext()
  return reactQuery.useMutation<
    undefined,
    ConnectionsRequestsDestroyError,
    ConnectionsRequestsDestroyVariables
  >({
    mutationFn: (variables: ConnectionsRequestsDestroyVariables) =>
      fetchConnectionsRequestsDestroy({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type ConnectionsRequestsAcceptCreatePathParams = {
  id: number
}

export type ConnectionsRequestsAcceptCreateError =
  Fetcher.ErrorWrapper<undefined>

export type ConnectionsRequestsAcceptCreateVariables = {
  pathParams: ConnectionsRequestsAcceptCreatePathParams
} & GeneratedApiContext['fetcherOptions']

export const fetchConnectionsRequestsAcceptCreate = (
  variables: ConnectionsRequestsAcceptCreateVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<
    undefined,
    ConnectionsRequestsAcceptCreateError,
    undefined,
    {},
    {},
    ConnectionsRequestsAcceptCreatePathParams
  >({
    url: '/api/connections/requests/{id}/accept',
    method: 'post',
    ...variables,
    signal,
  })

export const useConnectionsRequestsAcceptCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ConnectionsRequestsAcceptCreateError,
      ConnectionsRequestsAcceptCreateVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = useGeneratedApiContext()
  return reactQuery.useMutation<
    undefined,
    ConnectionsRequestsAcceptCreateError,
    ConnectionsRequestsAcceptCreateVariables
  >({
    mutationFn: (variables: ConnectionsRequestsAcceptCreateVariables) =>
      fetchConnectionsRequestsAcceptCreate({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type ConnectionsRequestsMakeCreateError = Fetcher.ErrorWrapper<undefined>

export type ConnectionsRequestsMakeCreateVariables = {
  body: Schemas.ConnectionRequestCreateRequest
} & GeneratedApiContext['fetcherOptions']

export const fetchConnectionsRequestsMakeCreate = (
  variables: ConnectionsRequestsMakeCreateVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<
    Schemas.ConnectionRequestCreate,
    ConnectionsRequestsMakeCreateError,
    Schemas.ConnectionRequestCreateRequest,
    {},
    {},
    {}
  >({
    url: '/api/connections/requests/make',
    method: 'post',
    ...variables,
    signal,
  })

export const useConnectionsRequestsMakeCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ConnectionRequestCreate,
      ConnectionsRequestsMakeCreateError,
      ConnectionsRequestsMakeCreateVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = useGeneratedApiContext()
  return reactQuery.useMutation<
    Schemas.ConnectionRequestCreate,
    ConnectionsRequestsMakeCreateError,
    ConnectionsRequestsMakeCreateVariables
  >({
    mutationFn: (variables: ConnectionsRequestsMakeCreateVariables) =>
      fetchConnectionsRequestsMakeCreate({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type MeetingsListError = Fetcher.ErrorWrapper<undefined>

export type MeetingsListResponse = Schemas.Meeting[]

export type MeetingsListVariables = GeneratedApiContext['fetcherOptions']

export const fetchMeetingsList = (
  variables: MeetingsListVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<
    MeetingsListResponse,
    MeetingsListError,
    undefined,
    {},
    {},
    {}
  >({ url: '/api/meetings/', method: 'get', ...variables, signal })

export const useMeetingsList = <TData = MeetingsListResponse>(
  variables: MeetingsListVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<MeetingsListResponse, MeetingsListError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGeneratedApiContext(options)
  return reactQuery.useQuery<MeetingsListResponse, MeetingsListError, TData>({
    queryKey: queryKeyFn({
      path: '/api/meetings/',
      operationId: 'meetingsList',
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchMeetingsList({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type MeetingsCreateError = Fetcher.ErrorWrapper<undefined>

export type MeetingsCreateVariables = {
  body: Schemas.MeetingRequest
} & GeneratedApiContext['fetcherOptions']

export const fetchMeetingsCreate = (
  variables: MeetingsCreateVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<
    Schemas.Meeting,
    MeetingsCreateError,
    Schemas.MeetingRequest,
    {},
    {},
    {}
  >({ url: '/api/meetings/', method: 'post', ...variables, signal })

export const useMeetingsCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Meeting,
      MeetingsCreateError,
      MeetingsCreateVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = useGeneratedApiContext()
  return reactQuery.useMutation<
    Schemas.Meeting,
    MeetingsCreateError,
    MeetingsCreateVariables
  >({
    mutationFn: (variables: MeetingsCreateVariables) =>
      fetchMeetingsCreate({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type MeetingsRetrievePathParams = {
  id: number
}

export type MeetingsRetrieveError = Fetcher.ErrorWrapper<undefined>

export type MeetingsRetrieveVariables = {
  pathParams: MeetingsRetrievePathParams
} & GeneratedApiContext['fetcherOptions']

export const fetchMeetingsRetrieve = (
  variables: MeetingsRetrieveVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<
    Schemas.Meeting,
    MeetingsRetrieveError,
    undefined,
    {},
    {},
    MeetingsRetrievePathParams
  >({ url: '/api/meetings/{id}', method: 'get', ...variables, signal })

export const useMeetingsRetrieve = <TData = Schemas.Meeting>(
  variables: MeetingsRetrieveVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.Meeting, MeetingsRetrieveError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGeneratedApiContext(options)
  return reactQuery.useQuery<Schemas.Meeting, MeetingsRetrieveError, TData>({
    queryKey: queryKeyFn({
      path: '/api/meetings/{id}',
      operationId: 'meetingsRetrieve',
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchMeetingsRetrieve({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type MeetingsUpdatePathParams = {
  id: number
}

export type MeetingsUpdateError = Fetcher.ErrorWrapper<undefined>

export type MeetingsUpdateVariables = {
  body: Schemas.MeetingRequest
  pathParams: MeetingsUpdatePathParams
} & GeneratedApiContext['fetcherOptions']

export const fetchMeetingsUpdate = (
  variables: MeetingsUpdateVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<
    Schemas.Meeting,
    MeetingsUpdateError,
    Schemas.MeetingRequest,
    {},
    {},
    MeetingsUpdatePathParams
  >({ url: '/api/meetings/{id}', method: 'put', ...variables, signal })

export const useMeetingsUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Meeting,
      MeetingsUpdateError,
      MeetingsUpdateVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = useGeneratedApiContext()
  return reactQuery.useMutation<
    Schemas.Meeting,
    MeetingsUpdateError,
    MeetingsUpdateVariables
  >({
    mutationFn: (variables: MeetingsUpdateVariables) =>
      fetchMeetingsUpdate({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type MeetingsPartialUpdatePathParams = {
  id: number
}

export type MeetingsPartialUpdateError = Fetcher.ErrorWrapper<undefined>

export type MeetingsPartialUpdateVariables = {
  body?: Schemas.PatchedMeetingRequest
  pathParams: MeetingsPartialUpdatePathParams
} & GeneratedApiContext['fetcherOptions']

export const fetchMeetingsPartialUpdate = (
  variables: MeetingsPartialUpdateVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<
    Schemas.Meeting,
    MeetingsPartialUpdateError,
    Schemas.PatchedMeetingRequest,
    {},
    {},
    MeetingsPartialUpdatePathParams
  >({ url: '/api/meetings/{id}', method: 'patch', ...variables, signal })

export const useMeetingsPartialUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Meeting,
      MeetingsPartialUpdateError,
      MeetingsPartialUpdateVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = useGeneratedApiContext()
  return reactQuery.useMutation<
    Schemas.Meeting,
    MeetingsPartialUpdateError,
    MeetingsPartialUpdateVariables
  >({
    mutationFn: (variables: MeetingsPartialUpdateVariables) =>
      fetchMeetingsPartialUpdate({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type MeetingsDestroyPathParams = {
  id: number
}

export type MeetingsDestroyError = Fetcher.ErrorWrapper<undefined>

export type MeetingsDestroyVariables = {
  pathParams: MeetingsDestroyPathParams
} & GeneratedApiContext['fetcherOptions']

export const fetchMeetingsDestroy = (
  variables: MeetingsDestroyVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<
    undefined,
    MeetingsDestroyError,
    undefined,
    {},
    {},
    MeetingsDestroyPathParams
  >({ url: '/api/meetings/{id}', method: 'delete', ...variables, signal })

export const useMeetingsDestroy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      MeetingsDestroyError,
      MeetingsDestroyVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = useGeneratedApiContext()
  return reactQuery.useMutation<
    undefined,
    MeetingsDestroyError,
    MeetingsDestroyVariables
  >({
    mutationFn: (variables: MeetingsDestroyVariables) =>
      fetchMeetingsDestroy({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type NotificationsGetAllError = Fetcher.ErrorWrapper<undefined>

export type NotificationsGetAllResponse = Schemas.Notification[]

export type NotificationsGetAllVariables = GeneratedApiContext['fetcherOptions']

/**
 * Lists all notifications for the current user
 */
export const fetchNotificationsGetAll = (
  variables: NotificationsGetAllVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<
    NotificationsGetAllResponse,
    NotificationsGetAllError,
    undefined,
    {},
    {},
    {}
  >({ url: '/api/notifications', method: 'get', ...variables, signal })

/**
 * Lists all notifications for the current user
 */
export const useNotificationsGetAll = <TData = NotificationsGetAllResponse>(
  variables: NotificationsGetAllVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      NotificationsGetAllResponse,
      NotificationsGetAllError,
      TData
    >,
    'queryKey' | 'queryFn' | 'initialData'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGeneratedApiContext(options)
  return reactQuery.useQuery<
    NotificationsGetAllResponse,
    NotificationsGetAllError,
    TData
  >({
    queryKey: queryKeyFn({
      path: '/api/notifications',
      operationId: 'notificationsGetAll',
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchNotificationsGetAll({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type NotificationsMarkAsSeenError = Fetcher.ErrorWrapper<
  | {
      status: 403
      payload: Schemas.Exception
    }
  | {
      status: Exclude<ClientErrorStatus | ServerErrorStatus, 200 | 403>
      payload: Schemas.Exception
    }
>

export type NotificationsMarkAsSeenVariables =
  GeneratedApiContext['fetcherOptions']

/**
 * Marks all unseen notifications as seen for logged in user
 */
export const fetchNotificationsMarkAsSeen = (
  variables: NotificationsMarkAsSeenVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<
    undefined,
    NotificationsMarkAsSeenError,
    undefined,
    {},
    {},
    {}
  >({
    url: '/api/notifications/mark-as-seen',
    method: 'get',
    ...variables,
    signal,
  })

/**
 * Marks all unseen notifications as seen for logged in user
 */
export const useNotificationsMarkAsSeen = <TData = undefined>(
  variables: NotificationsMarkAsSeenVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, NotificationsMarkAsSeenError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGeneratedApiContext(options)
  return reactQuery.useQuery<undefined, NotificationsMarkAsSeenError, TData>({
    queryKey: queryKeyFn({
      path: '/api/notifications/mark-as-seen',
      operationId: 'notificationsMarkAsSeen',
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchNotificationsMarkAsSeen({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type NotificationsGetUnseenError = Fetcher.ErrorWrapper<undefined>

export type NotificationsGetUnseenResponse = Schemas.Notification[]

export type NotificationsGetUnseenVariables =
  GeneratedApiContext['fetcherOptions']

/**
 * Lists all NOT SEEN notifications for the current user
 */
export const fetchNotificationsGetUnseen = (
  variables: NotificationsGetUnseenVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<
    NotificationsGetUnseenResponse,
    NotificationsGetUnseenError,
    undefined,
    {},
    {},
    {}
  >({ url: '/api/notifications/unseen', method: 'get', ...variables, signal })

/**
 * Lists all NOT SEEN notifications for the current user
 */
export const useNotificationsGetUnseen = <
  TData = NotificationsGetUnseenResponse
>(
  variables: NotificationsGetUnseenVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      NotificationsGetUnseenResponse,
      NotificationsGetUnseenError,
      TData
    >,
    'queryKey' | 'queryFn' | 'initialData'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGeneratedApiContext(options)
  return reactQuery.useQuery<
    NotificationsGetUnseenResponse,
    NotificationsGetUnseenError,
    TData
  >({
    queryKey: queryKeyFn({
      path: '/api/notifications/unseen',
      operationId: 'notificationsGetUnseen',
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchNotificationsGetUnseen({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type SchemaRetrieveQueryParams = {
  format?: 'json' | 'yaml'
  lang?:
    | 'af'
    | 'ar'
    | 'ar-dz'
    | 'ast'
    | 'az'
    | 'be'
    | 'bg'
    | 'bn'
    | 'br'
    | 'bs'
    | 'ca'
    | 'ckb'
    | 'cs'
    | 'cy'
    | 'da'
    | 'de'
    | 'dsb'
    | 'el'
    | 'en'
    | 'en-au'
    | 'en-gb'
    | 'eo'
    | 'es'
    | 'es-ar'
    | 'es-co'
    | 'es-mx'
    | 'es-ni'
    | 'es-ve'
    | 'et'
    | 'eu'
    | 'fa'
    | 'fi'
    | 'fr'
    | 'fy'
    | 'ga'
    | 'gd'
    | 'gl'
    | 'he'
    | 'hi'
    | 'hr'
    | 'hsb'
    | 'hu'
    | 'hy'
    | 'ia'
    | 'id'
    | 'ig'
    | 'io'
    | 'is'
    | 'it'
    | 'ja'
    | 'ka'
    | 'kab'
    | 'kk'
    | 'km'
    | 'kn'
    | 'ko'
    | 'ky'
    | 'lb'
    | 'lt'
    | 'lv'
    | 'mk'
    | 'ml'
    | 'mn'
    | 'mr'
    | 'ms'
    | 'my'
    | 'nb'
    | 'ne'
    | 'nl'
    | 'nn'
    | 'os'
    | 'pa'
    | 'pl'
    | 'pt'
    | 'pt-br'
    | 'ro'
    | 'ru'
    | 'sk'
    | 'sl'
    | 'sq'
    | 'sr'
    | 'sr-latn'
    | 'sv'
    | 'sw'
    | 'ta'
    | 'te'
    | 'tg'
    | 'th'
    | 'tk'
    | 'tr'
    | 'tt'
    | 'udm'
    | 'uk'
    | 'ur'
    | 'uz'
    | 'vi'
    | 'zh-hans'
    | 'zh-hant'
}

export type SchemaRetrieveError = Fetcher.ErrorWrapper<undefined>

export type SchemaRetrieveResponse = {
  [key: string]: any
}

export type SchemaRetrieveVariables = {
  queryParams?: SchemaRetrieveQueryParams
} & GeneratedApiContext['fetcherOptions']

/**
 * OpenApi3 schema for this API. Format can be selected via content negotiation.
 *
 * - YAML: application/vnd.oai.openapi
 * - JSON: application/vnd.oai.openapi+json
 */
export const fetchSchemaRetrieve = (
  variables: SchemaRetrieveVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<
    SchemaRetrieveResponse,
    SchemaRetrieveError,
    undefined,
    {},
    SchemaRetrieveQueryParams,
    {}
  >({ url: '/api/schema/', method: 'get', ...variables, signal })

/**
 * OpenApi3 schema for this API. Format can be selected via content negotiation.
 *
 * - YAML: application/vnd.oai.openapi
 * - JSON: application/vnd.oai.openapi+json
 */
export const useSchemaRetrieve = <TData = SchemaRetrieveResponse>(
  variables: SchemaRetrieveVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      SchemaRetrieveResponse,
      SchemaRetrieveError,
      TData
    >,
    'queryKey' | 'queryFn' | 'initialData'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGeneratedApiContext(options)
  return reactQuery.useQuery<
    SchemaRetrieveResponse,
    SchemaRetrieveError,
    TData
  >({
    queryKey: queryKeyFn({
      path: '/api/schema/',
      operationId: 'schemaRetrieve',
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchSchemaRetrieve({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type UserRetrievePathParams = {
  id: number
}

export type UserRetrieveError = Fetcher.ErrorWrapper<undefined>

export type UserRetrieveVariables = {
  pathParams: UserRetrievePathParams
} & GeneratedApiContext['fetcherOptions']

export const fetchUserRetrieve = (
  variables: UserRetrieveVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<
    Schemas.User,
    UserRetrieveError,
    undefined,
    {},
    {},
    UserRetrievePathParams
  >({ url: '/api/user/{id}', method: 'get', ...variables, signal })

export const useUserRetrieve = <TData = Schemas.User>(
  variables: UserRetrieveVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.User, UserRetrieveError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGeneratedApiContext(options)
  return reactQuery.useQuery<Schemas.User, UserRetrieveError, TData>({
    queryKey: queryKeyFn({
      path: '/api/user/{id}',
      operationId: 'userRetrieve',
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchUserRetrieve({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type UserProfileRetrievePathParams = {
  userId: number
}

export type UserProfileRetrieveError = Fetcher.ErrorWrapper<undefined>

export type UserProfileRetrieveVariables = {
  pathParams: UserProfileRetrievePathParams
} & GeneratedApiContext['fetcherOptions']

export const fetchUserProfileRetrieve = (
  variables: UserProfileRetrieveVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<
    Schemas.Profile,
    UserProfileRetrieveError,
    undefined,
    {},
    {},
    UserProfileRetrievePathParams
  >({ url: '/api/user/{userId}/profile', method: 'get', ...variables, signal })

export const useUserProfileRetrieve = <TData = Schemas.Profile>(
  variables: UserProfileRetrieveVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Profile,
      UserProfileRetrieveError,
      TData
    >,
    'queryKey' | 'queryFn' | 'initialData'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGeneratedApiContext(options)
  return reactQuery.useQuery<Schemas.Profile, UserProfileRetrieveError, TData>({
    queryKey: queryKeyFn({
      path: '/api/user/{userId}/profile',
      operationId: 'userProfileRetrieve',
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchUserProfileRetrieve({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type UserProfileUpdatePathParams = {
  userId: number
}

export type UserProfileUpdateError = Fetcher.ErrorWrapper<undefined>

export type UserProfileUpdateVariables = {
  body: Schemas.ProfileRequest
  pathParams: UserProfileUpdatePathParams
} & GeneratedApiContext['fetcherOptions']

export const fetchUserProfileUpdate = (
  variables: UserProfileUpdateVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<
    Schemas.Profile,
    UserProfileUpdateError,
    Schemas.ProfileRequest,
    {},
    {},
    UserProfileUpdatePathParams
  >({ url: '/api/user/{userId}/profile', method: 'put', ...variables, signal })

export const useUserProfileUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Profile,
      UserProfileUpdateError,
      UserProfileUpdateVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = useGeneratedApiContext()
  return reactQuery.useMutation<
    Schemas.Profile,
    UserProfileUpdateError,
    UserProfileUpdateVariables
  >({
    mutationFn: (variables: UserProfileUpdateVariables) =>
      fetchUserProfileUpdate({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type UserProfilePartialUpdatePathParams = {
  userId: number
}

export type UserProfilePartialUpdateError = Fetcher.ErrorWrapper<undefined>

export type UserProfilePartialUpdateVariables = {
  body?: Schemas.PatchedProfileRequest
  pathParams: UserProfilePartialUpdatePathParams
} & GeneratedApiContext['fetcherOptions']

export const fetchUserProfilePartialUpdate = (
  variables: UserProfilePartialUpdateVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<
    Schemas.Profile,
    UserProfilePartialUpdateError,
    Schemas.PatchedProfileRequest,
    {},
    {},
    UserProfilePartialUpdatePathParams
  >({
    url: '/api/user/{userId}/profile',
    method: 'patch',
    ...variables,
    signal,
  })

export const useUserProfilePartialUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Profile,
      UserProfilePartialUpdateError,
      UserProfilePartialUpdateVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = useGeneratedApiContext()
  return reactQuery.useMutation<
    Schemas.Profile,
    UserProfilePartialUpdateError,
    UserProfilePartialUpdateVariables
  >({
    mutationFn: (variables: UserProfilePartialUpdateVariables) =>
      fetchUserProfilePartialUpdate({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type UserProfileAvatarUpdatePathParams = {
  userId: number
}

export type UserProfileAvatarUpdateError = Fetcher.ErrorWrapper<undefined>

export type UserProfileAvatarUpdateVariables = {
  body?: Schemas.ProfileAvatarRequest
  pathParams: UserProfileAvatarUpdatePathParams
} & GeneratedApiContext['fetcherOptions']

export const fetchUserProfileAvatarUpdate = (
  variables: UserProfileAvatarUpdateVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<
    Schemas.ProfileAvatar,
    UserProfileAvatarUpdateError,
    Schemas.ProfileAvatarRequest,
    {},
    {},
    UserProfileAvatarUpdatePathParams
  >({
    url: '/api/user/{userId}/profile/avatar',
    method: 'put',
    ...variables,
    signal,
  })

export const useUserProfileAvatarUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ProfileAvatar,
      UserProfileAvatarUpdateError,
      UserProfileAvatarUpdateVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = useGeneratedApiContext()
  return reactQuery.useMutation<
    Schemas.ProfileAvatar,
    UserProfileAvatarUpdateError,
    UserProfileAvatarUpdateVariables
  >({
    mutationFn: (variables: UserProfileAvatarUpdateVariables) =>
      fetchUserProfileAvatarUpdate({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type UserProfileAvatarPartialUpdatePathParams = {
  userId: number
}

export type UserProfileAvatarPartialUpdateError =
  Fetcher.ErrorWrapper<undefined>

export type UserProfileAvatarPartialUpdateVariables = {
  body?: Schemas.PatchedProfileAvatarRequest
  pathParams: UserProfileAvatarPartialUpdatePathParams
} & GeneratedApiContext['fetcherOptions']

export const fetchUserProfileAvatarPartialUpdate = (
  variables: UserProfileAvatarPartialUpdateVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<
    Schemas.ProfileAvatar,
    UserProfileAvatarPartialUpdateError,
    Schemas.PatchedProfileAvatarRequest,
    {},
    {},
    UserProfileAvatarPartialUpdatePathParams
  >({
    url: '/api/user/{userId}/profile/avatar',
    method: 'patch',
    ...variables,
    signal,
  })

export const useUserProfileAvatarPartialUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ProfileAvatar,
      UserProfileAvatarPartialUpdateError,
      UserProfileAvatarPartialUpdateVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = useGeneratedApiContext()
  return reactQuery.useMutation<
    Schemas.ProfileAvatar,
    UserProfileAvatarPartialUpdateError,
    UserProfileAvatarPartialUpdateVariables
  >({
    mutationFn: (variables: UserProfileAvatarPartialUpdateVariables) =>
      fetchUserProfileAvatarPartialUpdate({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type UserCurrentRetrieveError = Fetcher.ErrorWrapper<undefined>

export type UserCurrentRetrieveVariables = GeneratedApiContext['fetcherOptions']

export const fetchUserCurrentRetrieve = (
  variables: UserCurrentRetrieveVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<
    Schemas.User,
    UserCurrentRetrieveError,
    undefined,
    {},
    {},
    {}
  >({ url: '/api/user/current', method: 'get', ...variables, signal })

export const useUserCurrentRetrieve = <TData = Schemas.User>(
  variables: UserCurrentRetrieveVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.User, UserCurrentRetrieveError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGeneratedApiContext(options)
  return reactQuery.useQuery<Schemas.User, UserCurrentRetrieveError, TData>({
    queryKey: queryKeyFn({
      path: '/api/user/current',
      operationId: 'userCurrentRetrieve',
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchUserCurrentRetrieve({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type UserLoginCreateError = Fetcher.ErrorWrapper<
  | {
      status: 401
      payload: Schemas.Exception
    }
  | {
      status: Exclude<ClientErrorStatus | ServerErrorStatus, 200 | 401>
      payload: Schemas.Exception
    }
>

export type UserLoginCreateVariables = {
  body: Schemas.LoginRequestRequest
} & GeneratedApiContext['fetcherOptions']

/**
 * Provides user login
 */
export const fetchUserLoginCreate = (
  variables: UserLoginCreateVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<
    Schemas.User,
    UserLoginCreateError,
    Schemas.LoginRequestRequest,
    {},
    {},
    {}
  >({ url: '/api/user/login', method: 'post', ...variables, signal })

/**
 * Provides user login
 */
export const useUserLoginCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.User,
      UserLoginCreateError,
      UserLoginCreateVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = useGeneratedApiContext()
  return reactQuery.useMutation<
    Schemas.User,
    UserLoginCreateError,
    UserLoginCreateVariables
  >({
    mutationFn: (variables: UserLoginCreateVariables) =>
      fetchUserLoginCreate({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type UserLogoutCreateError = Fetcher.ErrorWrapper<{
  status: Exclude<ClientErrorStatus | ServerErrorStatus, 200>
  payload: Schemas.Exception
}>

export type UserLogoutCreateVariables = GeneratedApiContext['fetcherOptions']

/**
 * Logouts user from the system
 */
export const fetchUserLogoutCreate = (
  variables: UserLogoutCreateVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<undefined, UserLogoutCreateError, undefined, {}, {}, {}>({
    url: '/api/user/logout',
    method: 'post',
    ...variables,
    signal,
  })

/**
 * Logouts user from the system
 */
export const useUserLogoutCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      UserLogoutCreateError,
      UserLogoutCreateVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = useGeneratedApiContext()
  return reactQuery.useMutation<
    undefined,
    UserLogoutCreateError,
    UserLogoutCreateVariables
  >({
    mutationFn: (variables: UserLogoutCreateVariables) =>
      fetchUserLogoutCreate({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type RegisterUserError = Fetcher.ErrorWrapper<
  | {
      status: 400
      payload: {
        [key: string]: string
      }
    }
  | {
      status: Exclude<ClientErrorStatus | ServerErrorStatus, 201 | 400>
      payload: Schemas.Exception
    }
>

export type RegisterUserVariables = {
  body: Schemas.UserRegisterRequest
} & GeneratedApiContext['fetcherOptions']

/**
 * Endpoint for user registration
 *
 * Creates both User and related Profile models
 */
export const fetchRegisterUser = (
  variables: RegisterUserVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<
    undefined,
    RegisterUserError,
    Schemas.UserRegisterRequest,
    {},
    {},
    {}
  >({ url: '/api/user/register', method: 'post', ...variables, signal })

/**
 * Endpoint for user registration
 *
 * Creates both User and related Profile models
 */
export const useRegisterUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      RegisterUserError,
      RegisterUserVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = useGeneratedApiContext()
  return reactQuery.useMutation<
    undefined,
    RegisterUserError,
    RegisterUserVariables
  >({
    mutationFn: (variables: RegisterUserVariables) =>
      fetchRegisterUser({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type UserSearchListError = Fetcher.ErrorWrapper<undefined>

export type UserSearchListResponse = Schemas.User[]

export type UserSearchListVariables = GeneratedApiContext['fetcherOptions']

export const fetchUserSearchList = (
  variables: UserSearchListVariables,
  signal?: AbortSignal
) =>
  generatedApiFetch<
    UserSearchListResponse,
    UserSearchListError,
    undefined,
    {},
    {},
    {}
  >({ url: '/api/user/search/', method: 'get', ...variables, signal })

export const useUserSearchList = <TData = UserSearchListResponse>(
  variables: UserSearchListVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      UserSearchListResponse,
      UserSearchListError,
      TData
    >,
    'queryKey' | 'queryFn' | 'initialData'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGeneratedApiContext(options)
  return reactQuery.useQuery<
    UserSearchListResponse,
    UserSearchListError,
    TData
  >({
    queryKey: queryKeyFn({
      path: '/api/user/search/',
      operationId: 'userSearchList',
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchUserSearchList({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type UserSearchList2PathParams = {
  competencyIds: string
}

export type UserSearchList2Error = Fetcher.ErrorWrapper<undefined>

export type UserSearchList2Response = Schemas.User[]

export type UserSearchList2Variables = {
  pathParams: UserSearchList2PathParams
} & GeneratedApiContext['fetcherOptions']

export const fetchUserSearchList2 = (
  variables: UserSearchList2Variables,
  signal?: AbortSignal
) =>
  generatedApiFetch<
    UserSearchList2Response,
    UserSearchList2Error,
    undefined,
    {},
    {},
    UserSearchList2PathParams
  >({
    url: '/api/user/search/{competencyIds}/',
    method: 'get',
    ...variables,
    signal,
  })

export const useUserSearchList2 = <TData = UserSearchList2Response>(
  variables: UserSearchList2Variables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      UserSearchList2Response,
      UserSearchList2Error,
      TData
    >,
    'queryKey' | 'queryFn' | 'initialData'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGeneratedApiContext(options)
  return reactQuery.useQuery<
    UserSearchList2Response,
    UserSearchList2Error,
    TData
  >({
    queryKey: queryKeyFn({
      path: '/api/user/search/{competencyIds}/',
      operationId: 'userSearchList2',
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchUserSearchList2({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type QueryOperation =
  | {
      path: '/api/competency/all'
      operationId: 'competencyAllList'
      variables: CompetencyAllListVariables
    }
  | {
      path: '/api/connections'
      operationId: 'connectionsList'
      variables: ConnectionsListVariables
    }
  | {
      path: '/api/connections/requests'
      operationId: 'connectionsRequestsList'
      variables: ConnectionsRequestsListVariables
    }
  | {
      path: '/api/meetings/'
      operationId: 'meetingsList'
      variables: MeetingsListVariables
    }
  | {
      path: '/api/meetings/{id}'
      operationId: 'meetingsRetrieve'
      variables: MeetingsRetrieveVariables
    }
  | {
      path: '/api/notifications'
      operationId: 'notificationsGetAll'
      variables: NotificationsGetAllVariables
    }
  | {
      path: '/api/notifications/mark-as-seen'
      operationId: 'notificationsMarkAsSeen'
      variables: NotificationsMarkAsSeenVariables
    }
  | {
      path: '/api/notifications/unseen'
      operationId: 'notificationsGetUnseen'
      variables: NotificationsGetUnseenVariables
    }
  | {
      path: '/api/schema/'
      operationId: 'schemaRetrieve'
      variables: SchemaRetrieveVariables
    }
  | {
      path: '/api/user/{id}'
      operationId: 'userRetrieve'
      variables: UserRetrieveVariables
    }
  | {
      path: '/api/user/{userId}/profile'
      operationId: 'userProfileRetrieve'
      variables: UserProfileRetrieveVariables
    }
  | {
      path: '/api/user/current'
      operationId: 'userCurrentRetrieve'
      variables: UserCurrentRetrieveVariables
    }
  | {
      path: '/api/user/search/'
      operationId: 'userSearchList'
      variables: UserSearchListVariables
    }
  | {
      path: '/api/user/search/{competencyIds}/'
      operationId: 'userSearchList2'
      variables: UserSearchList2Variables
    }
